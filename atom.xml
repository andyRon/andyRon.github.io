<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣欣向戎</title>
  
  <subtitle>AndyRon&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andyron.com/"/>
  <updated>2018-11-10T05:51:49.533Z</updated>
  <id>http://andyron.com/</id>
  
  <author>
    <name>AndyRon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《思考，快与慢》—— 直觉快速解决大部分事情，慢下来理性解决小部分麻烦</title>
    <link href="http://andyron.com/2018/%E6%80%9D%E8%80%83%EF%BC%8C%E5%BF%AB%E4%B8%8E%E6%85%A2.html"/>
    <id>http://andyron.com/2018/思考，快与慢.html</id>
    <published>2018-11-10T04:06:00.000Z</published>
    <updated>2018-11-10T05:51:49.533Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-f5f01c4af0d49d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;思考，快与慢&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;丹尼尔·卡尼曼&lt;/strong&gt;，美国普林斯顿大学教授，历史上第一位获得诺贝尔经济学奖的心理学家（2002年），&lt;strong&gt;行为经济学&lt;/strong&gt;的鼻祖。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10785583/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《思考，快与慢》&lt;/a&gt;是行为经济学流派的经典力作，运用心理学理论和经济学分析结合的方法，第一次对于影响个人和群体经济决策的偏见问题进行深入分析。它认为人并不是理性的经济动物，相反在很多情况下并不理性，&lt;strong&gt;偏见&lt;/strong&gt;与生俱来，与直觉紧密相关。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="行为经济学" scheme="http://andyron.com/tags/%E8%A1%8C%E4%B8%BA%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
      <category term="偏见" scheme="http://andyron.com/tags/%E5%81%8F%E8%A7%81/"/>
    
      <category term="快思考" scheme="http://andyron.com/tags/%E5%BF%AB%E6%80%9D%E8%80%83/"/>
    
      <category term="慢思考" scheme="http://andyron.com/tags/%E6%85%A2%E6%80%9D%E8%80%83/"/>
    
      <category term="锚定效应" scheme="http://andyron.com/tags/%E9%94%9A%E5%AE%9A%E6%95%88%E5%BA%94/"/>
    
      <category term="典型性偏好" scheme="http://andyron.com/tags/%E5%85%B8%E5%9E%8B%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="光环效应" scheme="http://andyron.com/tags/%E5%85%89%E7%8E%AF%E6%95%88%E5%BA%94/"/>
    
      <category term="可得性偏好" scheme="http://andyron.com/tags/%E5%8F%AF%E5%BE%97%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="因果性偏好" scheme="http://andyron.com/tags/%E5%9B%A0%E6%9E%9C%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="框架效应" scheme="http://andyron.com/tags/%E6%A1%86%E6%9E%B6%E6%95%88%E5%BA%94/"/>
    
      <category term="禀赋效应" scheme="http://andyron.com/tags/%E7%A6%80%E8%B5%8B%E6%95%88%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-链表</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E9%93%BE%E8%A1%A8.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-链表.html</id>
    <published>2018-11-08T10:33:00.000Z</published>
    <updated>2018-11-08T10:37:18.312Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linked%20List&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Linked List&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-d7d3d78ad3f0af28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表(Linked List)&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个主题已经有辅导&lt;a href=&quot;https://www.raywenderlich.com/144083/swift-algorithm-club-swift-linked-list-data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;链表是一系列数据项，就像数组一样。 数组分配了一大块内存来存储对象，而链表中的元素在内存中是完全独立的对象，并通过链接连接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------+    +--------+    +--------+    +--------+
|        |    |        |    |        |    |        |
| node 0 |---&amp;gt;| node 1 |---&amp;gt;| node 2 |---&amp;gt;| node 3 |
|        |    |        |    |        |    |        |
+--------+    +--------+    +--------+    +--------+
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://andyron.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS-tutorial-16：TravelVlogs——使用AVKit和AVFoundation创建视频应用</title>
    <link href="http://andyron.com/2018/ios-tutorial-16-TravelVlogs.html"/>
    <id>http://andyron.com/2018/ios-tutorial-16-TravelVlogs.html</id>
    <published>2018-11-07T11:21:17.000Z</published>
    <updated>2018-11-07T11:53:47.998Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TravelVlogs项目是介绍如何使用AVKit和AVFoundation框架构建简单的视频流应用。&lt;/p&gt;
&lt;h2 id=&quot;预览图&quot;&gt;&lt;a href=&quot;#预览图&quot; class=&quot;headerlink&quot; title=&quot;预览图&quot;&gt;&lt;/a&gt;预览图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-4d2e3d6beb13a837.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
      <category term="iOS tutorial" scheme="http://andyron.com/categories/iOS/iOS-tutorial/"/>
    
    
      <category term="AVKit" scheme="http://andyron.com/tags/AVKit/"/>
    
      <category term="AVFoundation" scheme="http://andyron.com/tags/AVFoundation/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-基数排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-基数排序.html</id>
    <published>2018-11-06T06:30:00.000Z</published>
    <updated>2018-11-06T06:23:52.289Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Radix%20Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Radix Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基数排序-Radix-Sort&quot;&gt;&lt;a href=&quot;#基数排序-Radix-Sort&quot; class=&quot;headerlink&quot; title=&quot;基数排序(Radix Sort)&quot;&gt;&lt;/a&gt;基数排序(Radix Sort)&lt;/h1&gt;&lt;p&gt;基数排序是一种排序算法，它将整数数组作为输入，并使用排序子程序（通常是另一种有效的排序算法）来按整数基数或者它们的数字对整数进行排序。 Counting Sort和Bucket Sort通常用作Radix Sort的子程序。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="基数排序" scheme="http://andyron.com/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-计数排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-计数排序.html</id>
    <published>2018-11-06T03:40:00.000Z</published>
    <updated>2018-11-06T05:51:15.116Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Counting%20Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Counting Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;计数排序-Counting-Sort&quot;&gt;&lt;a href=&quot;#计数排序-Counting-Sort&quot; class=&quot;headerlink&quot; title=&quot;计数排序(Counting Sort)&quot;&gt;&lt;/a&gt;计数排序(Counting Sort)&lt;/h1&gt;&lt;p&gt;Counting sort is an algorithm for sorting a collection of objects according to keys that are small integers. It operates by counting the number of objects that have each distinct key values, and using arithmetic on those counts to determine the positions of each key value in the output sequence.&lt;br&gt;计数排序是一种根据小整数键对对象集合进行排序的算法。通过计算具有每个不同键值的对象的数量来操作，并对这些计数使用算术来确定输出序列中每个键值的位置。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计数排序" scheme="http://andyron.com/tags/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-希尔排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-希尔排序.html</id>
    <published>2018-11-05T08:40:00.000Z</published>
    <updated>2018-11-05T09:51:16.406Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Shell%20Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Shell Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;希尔排序-Shell-Sort&quot;&gt;&lt;a href=&quot;#希尔排序-Shell-Sort&quot; class=&quot;headerlink&quot; title=&quot;希尔排序(Shell Sort)&quot;&gt;&lt;/a&gt;希尔排序(Shell Sort)&lt;/h1&gt;&lt;p&gt;希尔排序是&lt;a href=&quot;../Insertion%20Sort/&quot;&gt;插入排序&lt;/a&gt;的一种更高效的改进版本，方法是将原始列表分成较小的子列表，然后使用插入排序对其进行单独排序。&lt;/p&gt;
&lt;p&gt;Sapientia大学创建了一个很好的&lt;a href=&quot;https://www.youtube.com/watch?v=CmPA7zE8mx0）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频&lt;/a&gt;，显示了匈牙利民间舞蹈的过程。（译注：类似希尔排序的过程，油管视频需要翻墙）&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="希尔排序" scheme="http://andyron.com/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>读《分享时代：如何缔造影响力》</title>
    <link href="http://andyron.com/2018/%E5%88%86%E4%BA%AB%E6%97%B6%E4%BB%A3%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BC%94%E9%80%A0%E5%BD%B1%E5%93%8D%E5%8A%9B.html"/>
    <id>http://andyron.com/2018/分享时代：如何缔造影响力.html</id>
    <published>2018-11-04T07:06:00.000Z</published>
    <updated>2018-11-04T07:22:57.564Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-59abc0694135351e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;分享时代&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;作者&lt;strong&gt;布赖恩·克雷默(Bryan Kramer)&lt;/strong&gt;， 知名演讲人、咨询师、教练、畅销书作者。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26827114/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《分享时代：如何缔造影响力》&lt;/a&gt;原著名是《Shareology: how sharing is powering the human economy》，本书是一本教你通过分享提升影响力的书。它深刻剖析了人类分享的本质，同时为读者阐明了分享经济在未来将要发挥的力量。更重要的是，本书告诉你如何建立个人影响力，如何把有价值的内容传递到目标客户中从而提升企业的影响力。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="分享" scheme="http://andyron.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="个人品牌" scheme="http://andyron.com/tags/%E4%B8%AA%E4%BA%BA%E5%93%81%E7%89%8C/"/>
    
      <category term="影响力" scheme="http://andyron.com/tags/%E5%BD%B1%E5%93%8D%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>读《知识的边界》—— 自下而上，链接一切</title>
    <link href="http://andyron.com/2018/%E7%9F%A5%E8%AF%86%E7%9A%84%E8%BE%B9%E7%95%8C.html"/>
    <id>http://andyron.com/2018/知识的边界.html</id>
    <published>2018-10-31T11:58:30.000Z</published>
    <updated>2018-10-30T07:25:36.166Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-3a4fed480423778b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Too Big to Know&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;戴维·温伯格&lt;/strong&gt; 是哈佛大学伯克曼网络与社会研究中心的资深研究员，还曾担任过美国总统候选人的网络政策顾问。在过去二十多年的时间里，他都在思考互联网对于人类的思想、沟通和社会的影响，写了很多重要的著作，可以称得上一位互联网思想家。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26279954/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《知识的边界》&lt;/a&gt;，英文书名为“Too Big to Know”，直接翻译就是“大到不可知”。看这个书名的意思有点和另一本畅销书&lt;a href=&quot;https://book.douban.com/subject/26645277/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《浅薄 - 互联网如何毒化了我们的大脑》&lt;/a&gt;观点类似：互联网带来了信息过载的问题，知识碎片化的问题，网络世界实在是太大了，大到我们根本不可能去理解它。然而恰恰相反，本书的作者&lt;strong&gt;戴维·温伯格&lt;/strong&gt;认为，如果有人认为互联网成为了获取知识的阻碍，那么很可能是因为他没有真正理解正在发生的知识变革，&lt;strong&gt;互联网创造出的无限连接的信息网络，让我们更接近知识的真相&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26279954/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《知识的边界》&lt;/a&gt; 和 &lt;a href=&quot;https://book.douban.com/subject/26645277/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《浅薄 - 互联网如何毒化了我们的大脑》&lt;/a&gt; 两本书观点有点对立可以一起看看。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="知识" scheme="http://andyron.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
      <category term="互联网" scheme="http://andyron.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="纸质书" scheme="http://andyron.com/tags/%E7%BA%B8%E8%B4%A8%E4%B9%A6/"/>
    
      <category term="电子书" scheme="http://andyron.com/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
      <category term="链接" scheme="http://andyron.com/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>读《腾讯传》—— 腾讯的发展也是中国互联网企业的缩影</title>
    <link href="http://andyron.com/2018/%E8%AF%BB%E3%80%8A%E8%85%BE%E8%AE%AF%E4%BC%A0%E3%80%8B.html"/>
    <id>http://andyron.com/2018/读《腾讯传》.html</id>
    <published>2018-10-30T03:41:30.000Z</published>
    <updated>2018-10-30T05:21:49.890Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fwnsx9vp1rj308o0bugll.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;吴晓波&lt;/strong&gt;：著名财经作家，“吴晓波频道”、蓝狮子出版创始人，常年从事中国企业史和公司案例研究。著有《大败局》I和II、《激荡三十年》《跌荡一百年》《浩荡两千年》《历代经济变革得失》等广具影响力的财经书籍，著作两次入选《亚洲周刊》年度最佳图书。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26929955/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《腾讯传1998-2016：中国互联网公司进化论》&lt;/a&gt;，腾讯官方唯一授权的权威传记，腾讯的发展路径，亦是中国互联网企业成长的缩影。&lt;strong&gt;读懂腾讯，读懂中国互联网。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="互联网" scheme="http://andyron.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="腾讯" scheme="http://andyron.com/tags/%E8%85%BE%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>读《混乱》—— 机械化中需要一点点混乱</title>
    <link href="http://andyron.com/2018/%E6%B7%B7%E4%B9%B1.html"/>
    <id>http://andyron.com/2018/混乱.html</id>
    <published>2018-10-27T07:58:30.000Z</published>
    <updated>2018-10-27T08:16:55.240Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提到混乱，就想到两个影视剧中的台词&quot;&gt;&lt;a href=&quot;#提到混乱，就想到两个影视剧中的台词&quot; class=&quot;headerlink&quot; title=&quot;提到混乱，就想到两个影视剧中的台词&quot;&gt;&lt;/a&gt;提到混乱，就想到两个影视剧中的台词&lt;/h2&gt;&lt;h3 id=&quot;第一个是权力的游戏：混乱是阶梯-Chaos-is-a-ladder&quot;&gt;&lt;a href=&quot;#第一个是权力的游戏：混乱是阶梯-Chaos-is-a-ladder&quot; class=&quot;headerlink&quot; title=&quot;第一个是权力的游戏：混乱是阶梯(Chaos is a ladder)&quot;&gt;&lt;/a&gt;第一个是权力的游戏：&lt;strong&gt;混乱是阶梯(Chaos is a ladder)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;S03E06，约48min处&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-84032dac49abc342.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;权力的游戏S03E06，约48min处&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="混乱" scheme="http://andyron.com/tags/%E6%B7%B7%E4%B9%B1/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的高阶函数：sorted, map, reduce, forEach, flatMap, filter</title>
    <link href="http://andyron.com/2018/swift-higher-order-function.html"/>
    <id>http://andyron.com/2018/swift-higher-order-function.html</id>
    <published>2018-10-15T12:41:19.000Z</published>
    <updated>2018-10-15T13:07:24.724Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;高阶函数（Higher-order function）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数学和计算机科学中，&lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;高阶函数&lt;/strong&gt;&lt;/a&gt;是至少满足下列一个条件的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受一个或多个函数作为输入&lt;/li&gt;
&lt;li&gt;输出一个函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数式编程中，高阶函数比较常见了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;… 表示闭包第一个参数，第二个参数，第三个参数…。 详细可参考&lt;a href=&quot;http://andyron.com/2017/swift-7-closure&quot;&gt;以撸代码的形式学习Swift-7：闭包(Closure)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-sorted&quot;&gt;&lt;a href=&quot;#1-sorted&quot; class=&quot;headerlink&quot; title=&quot;1 sorted&quot;&gt;&lt;/a&gt;1 sorted&lt;/h3&gt;&lt;p&gt; 根据给定的条件（一个用于比较的闭包）来对数组进行排序。&lt;/p&gt;
&lt;p&gt; 函数原型：&lt;br&gt; &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(by areInIncreasingOrder: &lt;span class=&quot;params&quot;&gt;(Element, Element)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;rethrows&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; res = numbers.sorted &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt; $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(res.description)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-map&quot;&gt;&lt;a href=&quot;#2-map&quot; class=&quot;headerlink&quot; title=&quot;2 map&quot;&gt;&lt;/a&gt;2 map&lt;/h3&gt;&lt;p&gt; 返回一个包含对原数组每个元素进行给定闭包处理后元素的数组。（也就是每个元素进行相同处理）&lt;/p&gt;
&lt;p&gt; 函数原型：&lt;br&gt; &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; transform: &lt;span class=&quot;params&quot;&gt;(Element)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;rethrows&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift" scheme="http://andyron.com/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-二叉树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二叉树.html</id>
    <published>2018-10-10T02:20:00.000Z</published>
    <updated>2018-10-10T02:34:47.626Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;二叉树是一种&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;树&lt;/a&gt;，其中每个节点具有0,1或2个子节点。 这是一个二叉树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/Binary%20Tree/Images/BinaryTree.png&quot; alt=&quot;一个二叉树&quot;&gt;&lt;/p&gt;
&lt;p&gt;子节点通常称为 &lt;em&gt;左&lt;/em&gt; 子节点 和 &lt;em&gt;右&lt;/em&gt; 子节点。 如果节点没有任何子节点，则称为 &lt;em&gt;叶子&lt;/em&gt;节点。 &lt;em&gt;根&lt;/em&gt; 是树顶部的节点（程序员习惯树颠倒了😀）。&lt;/p&gt;
&lt;p&gt;节点通常会有一个返回其父节点的连接，但这不是绝对必要的。&lt;/p&gt;
&lt;p&gt;二叉树通常用作&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search%20Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二叉搜索树&lt;/a&gt;。 在这种情况下，节点必须按特定顺序排列（左侧是较小的值，右侧是较大的值）。 但这不是所有二叉树的要求。&lt;/p&gt;
&lt;p&gt;例如，这是一个二叉树，表示一系列算术运算，&lt;code&gt;(5 * (a - 10)) + (-4 * (3 / b))&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/Binary%20Tree/Images/Operations.png&quot; alt=&quot;一个二叉树&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://andyron.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-查找最大／最小值</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%EF%BC%8F%E6%9C%80%E5%B0%8F%E5%80%BC.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-查找最大／最小值.html</id>
    <published>2018-10-07T12:31:00.000Z</published>
    <updated>2018-10-07T12:33:55.922Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Select%20Minimum%20Maximum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Select Minimum Maximum&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：查找未排序数组中的最大/最小值。&lt;/p&gt;
&lt;h2 id=&quot;最大值或最小值&quot;&gt;&lt;a href=&quot;#最大值或最小值&quot; class=&quot;headerlink&quot; title=&quot;最大值或最小值&quot;&gt;&lt;/a&gt;最大值或最小值&lt;/h2&gt;&lt;p&gt;我们有一个通用对象数组，我们迭代所有对象，跟踪遇到的最小/最大元素。&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;假设我们想在未排序列表&lt;code&gt;[8,3,9,4,6]&lt;/code&gt;中找到最大值。&lt;/p&gt;
&lt;p&gt;选择第一个数字&lt;code&gt;8&lt;/code&gt;，并将其存储作为目前为止的最大元素。&lt;/p&gt;
&lt;p&gt;从列表中选择下一个数字&lt;code&gt;3&lt;/code&gt;，并将其与当前最大值进行比较。 &lt;code&gt;3&lt;/code&gt;小于&lt;code&gt;8&lt;/code&gt;所以最大值&lt;code&gt;8&lt;/code&gt;不会改变。&lt;/p&gt;
&lt;p&gt;从列表中选择下一个数字&lt;code&gt;9&lt;/code&gt;，并将其与当前最大值进行比较。 &lt;code&gt;9&lt;/code&gt;大于&lt;code&gt;8&lt;/code&gt;所以我们存储&lt;code&gt;9&lt;/code&gt;作为最大值。&lt;/p&gt;
&lt;p&gt;重复此过程，直到处理完列表中的所有元素。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;在Swift中的一个简单实现：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minimum&lt;/span&gt;&amp;lt;T: Comparable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; array: [T])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minimum = array.first &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array.&lt;span class=&quot;built_in&quot;&gt;dropFirst&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    minimum = element &amp;lt; minimum ? element : minimum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minimum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maximum&lt;/span&gt;&amp;lt;T: Comparable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; array: [T])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maximum = array.first &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array.&lt;span class=&quot;built_in&quot;&gt;dropFirst&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maximum = element &amp;gt; maximum ? element : maximum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maximum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="查找最大／最小值" scheme="http://andyron.com/tags/%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%EF%BC%8F%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>读《科学是怎样败给迷信的》——迷信有时简直太可怕了</title>
    <link href="http://andyron.com/2018/%E7%A7%91%E5%AD%A6%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B4%A5%E7%BB%99%E8%BF%B7%E4%BF%A1%E7%9A%84.html"/>
    <id>http://andyron.com/2018/科学是怎样败给迷信的.html</id>
    <published>2018-10-07T08:58:30.000Z</published>
    <updated>2018-10-07T09:50:54.720Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-9f3568efcd8dd54b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;约翰·伯纳姆&lt;/strong&gt;是美国俄亥俄州立大学历史系教授，还曾经是美国医学史学会的主席，也是科学传播史方面的专家。他的主要研究领域包括美国医学史、科学史和社会史，在历史学、医学和科学领域的许多重要期刊上都发表过文章，还出版了十余本科学史著作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1873519/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《科学是怎样败给迷信的：美国的科学与卫生普及》&lt;/a&gt; 研究美国从1830年起的科学普及史，揭示了这样一个令人迷惑的现象：曾经作为一种积极、进步的文化力量的科学，在美国消费文化中，慢慢地为新伪装下的迷信和神秘主义的复活让出了一条通道，最终导致科学在大众层面上被迷信击败。作者以19、20世纪美国的科学普及史为经，以公共卫生、心理学和自然科学三个领域内的普及活动为纬，向读者展现了一部美国的科学与迷信的“战斗史”。&lt;/p&gt;
&lt;p&gt;面对迷信的泛滥，作者敏锐地指出，科学之所以败给迷信，就是因为&lt;strong&gt;科学知识的传播出现了问题&lt;/strong&gt;。阅读这本书，不但能帮助我们&lt;strong&gt;分辨朋友圈中的各种谣言和迷信，还能启发我们建立起一种跨越自然科学和社会科学的大视角&lt;/strong&gt;。🌰：各种养生保健的“小技巧”、各种占星相面风水手相的“小知识”、甚至转发求转运的锦鲤……数不胜数。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>读《睡眠革命》——睡眠质量直接影响生活和工作质量</title>
    <link href="http://andyron.com/2018/%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD.html"/>
    <id>http://andyron.com/2018/睡眠革命.html</id>
    <published>2018-10-07T03:58:30.000Z</published>
    <updated>2018-10-07T09:03:23.533Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-39a2685008e3d55b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;尼克·利特尔黑尔斯，英国睡眠协会的前任会长、英超曼联队御用的运动睡眠教练，曾经给 NBA、英国天空车队、英式橄榄球联合会、美国国家橄榄球联盟、英超足球联赛选手、奥运会英国代表队、皇家马德里足球俱乐部做睡眠指导。很多世界级顶级体育名将，比如足球名将大卫·贝克汉姆、瑞恩·吉格斯、保罗·斯科尔斯、尼基·巴特和内维尔兄弟等，都采纳了其睡眠方案，他们的工作和生活的质量都得到了提升。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/27023900/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《睡眠革命》&lt;/a&gt;的精髓是&lt;strong&gt;如何让睡眠变得高效，把睡眠当作一个工具，增强智力和体力。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;睡眠占据了我们整个生命三分之一左右的时间，非常有必要认真对待。&lt;/p&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;h3 id=&quot;一、如何打造一个合适的睡眠环境&quot;&gt;&lt;a href=&quot;#一、如何打造一个合适的睡眠环境&quot; class=&quot;headerlink&quot; title=&quot;一、如何打造一个合适的睡眠环境&quot;&gt;&lt;/a&gt;一、如何打造一个合适的睡眠环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/褪黑素&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;褪黑素&lt;/a&gt;是人体的一种激素，能够帮助人体进入睡眠。正常来说，夜间人体会分泌比白天多5-10倍的褪黑素，但因为现代生活的各种光线的影响，会让褪黑素的分泌减少，久而久之就影响睡眠。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-选择排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-选择排序.html</id>
    <published>2018-09-28T01:57:00.000Z</published>
    <updated>2018-09-28T02:24:28.252Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Selection%20Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Selection Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：将数组从低到高（或从高到低）排序。&lt;/p&gt;
&lt;p&gt;您将获得一系列需要按正确顺序排列的数字。 选择排序算法将数组分为两部分：数组的开头是排序的，数组的其余部分是仍然需要排序的数字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ ...sorted numbers... | ...unsorted numbers... ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这类似于&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Insertion%20Sort/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;插入排序&lt;/a&gt;，但区别在于如何将新数字添加到已排序部分。&lt;/p&gt;
&lt;p&gt;它的工作原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到数组中的最小数字。 从索引0开始，遍历数组中的所有数字，并追踪最小数字的位置。&lt;/li&gt;
&lt;li&gt;使用索引0处的数字交换最小数字。现在，已排序部分仅包含索引0处的数字。&lt;/li&gt;
&lt;li&gt;转到索引1处。&lt;/li&gt;
&lt;li&gt;找到数组其余部分中的最小数字。 从索引1开始查看。再次循环直到数组结束并追踪最小数字。&lt;/li&gt;
&lt;li&gt;使用索引1处的数字交换最小数字。现在，已排序部分包含两个数字，索引0和索引1。&lt;/li&gt;
&lt;li&gt;转到索引2处。&lt;/li&gt;
&lt;li&gt;从索引2开始，找到数组其余部分中的最小数字，并将其与索引2处的数字交换。现在，数组从索引0到2已排序; 此范围包含数组中的三个最小数字。&lt;/li&gt;
&lt;li&gt;并继续，直到没有数字需要排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种排序方式之所以被称为“选择”排序，是因为在每个步骤中，都是在数组的其余部分里搜索选择下一个最小数字。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="选择排序" scheme="http://andyron.com/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-二维数组</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二维数组.html</id>
    <published>2018-09-25T01:31:00.000Z</published>
    <updated>2018-09-28T02:24:25.635Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Array2D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Array2D&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在C和Objective-C中，您可以编写下面代码，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int cookies[9][7];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;制作9x7网格的cookies。 这将创建一个包含63个元素的二维数组。 要在第3列和第6行找到cookie，您可以写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myCookie = cookies[3][6];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码在Swift中不能成立的。 要在Swift中创建一个多维数组，您可以编写：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cookies = [[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; row = [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    row.append(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cookies.append(row)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，要查找cookie，您可以写：&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二维数组" scheme="http://andyron.com/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-树.html</id>
    <published>2018-09-24T03:51:00.000Z</published>
    <updated>2018-09-28T02:24:19.013Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅导&lt;a href=&quot;https://www.raywenderlich.com/138190/swift-algorithm-club-swift-tree-data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;树表示对象之间的层次关系。 这是一个树的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-6de5f684447d3f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;树由节点组成，这些节点彼此连接。&lt;/p&gt;
&lt;p&gt;节点可以连接到他们的子节点，也可以连接到他们的父节点。 子节点是给定节点下的节点; 父节点是上面的节点。 节点始终只有一个父节点，但可以有多个子节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-dc7624f2f8b15ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A tree&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="tree" scheme="http://andyron.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-统计出现次数</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E7%BB%9F%E8%AE%A1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-统计出现次数.html</id>
    <published>2018-09-23T09:46:00.000Z</published>
    <updated>2018-09-28T02:24:10.428Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Count%20Occurrences&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Count Occurrences&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：计算某个值在数组中出现的次数。&lt;/p&gt;
&lt;p&gt;显而易见的方法是从数组的开头直到结束的&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linear%20Search/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;线性搜索&lt;/a&gt;，计算您遇到该值的次数。 这是一个 &lt;strong&gt;O(n)&lt;/strong&gt; 算法。&lt;/p&gt;
&lt;p&gt;但是，如果数组已经排过序的，则可以通过使用修改&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二分搜索&lt;/a&gt;来更快的完成这个任务，时间复杂度为&lt;strong&gt;O(logn)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设我们有以下数组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11 ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想知道值&lt;code&gt;3&lt;/code&gt;出现的次数，我们可以进行常规二分搜索。 这可以获得四个&lt;code&gt;3&lt;/code&gt;索引中的一个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11 ]
           *  *  *  *
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="统计出现次数" scheme="http://andyron.com/tags/%E7%BB%9F%E8%AE%A1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-归并排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-归并排序.html</id>
    <published>2018-09-23T07:47:00.000Z</published>
    <updated>2018-10-07T12:31:22.778Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Merge%20Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Merge Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这个主题已经有辅导&lt;a href=&quot;https://www.raywenderlich.com/154256/swift-algorithm-club-swift-merge-sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标：将数组从低到高（或从高到低）排序&lt;/p&gt;
&lt;p&gt;归并排序是1945年由John von Neumann发明的，是一种有效的算法，最佳、最差和平均时间复杂度都是&lt;strong&gt;O(n log n)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;归并排序算法使用&lt;strong&gt;分而治之&lt;/strong&gt;方法，即将一个大问题分解为较小的问题并解决它们。 归并排序算法可分为 &lt;strong&gt;先拆分&lt;/strong&gt; 和 &lt;strong&gt;后合并&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设您需要按正确的顺序对长度为 &lt;em&gt;n&lt;/em&gt; 的数组进行排序。 归并排序算法的工作原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数字放在未排序的堆中。&lt;/li&gt;
&lt;li&gt;将堆分成两部分。 那么现在就有&lt;strong&gt;两个未排序的数字堆&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;继续分裂&lt;strong&gt;两个未排序的数字堆&lt;/strong&gt;，直到你不能分裂为止。 最后，你将拥有 &lt;em&gt;n&lt;/em&gt; 个堆，每堆中有一个数字。&lt;/li&gt;
&lt;li&gt;通过顺序配对，开始 &lt;strong&gt;合并&lt;/strong&gt; 堆。 在每次合并期间，将内容按排序顺序排列。 这很容易，因为每个单独的堆已经排序（译注：单个数字没有所谓的顺序，就是排好序的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;h3 id=&quot;拆分&quot;&gt;&lt;a href=&quot;#拆分&quot; class=&quot;headerlink&quot; title=&quot;拆分&quot;&gt;&lt;/a&gt;拆分&lt;/h3&gt;&lt;p&gt;假设给你一个长度为&lt;em&gt;n&lt;/em&gt;的未排序数组：&lt;code&gt;[2,1,5,4,9]&lt;/code&gt;。 目标是不断拆分堆，直到你不能拆分为止。&lt;/p&gt;
&lt;p&gt;首先，将数组分成两半：&lt;code&gt;[2,1]&lt;/code&gt;和&lt;code&gt;[5,4,9]&lt;/code&gt;。 你能继续拆分吗？ 是的你可以！&lt;/p&gt;
&lt;p&gt;专注于左边堆。 将&lt;code&gt;[2,1]&lt;/code&gt;拆分为&lt;code&gt;[2]&lt;/code&gt;和&lt;code&gt;[1]&lt;/code&gt;。 你能继续拆分吗？ 不能了。检查右边的堆。&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;[5,4,9]&lt;/code&gt;拆分为&lt;code&gt;[5]&lt;/code&gt;和&lt;code&gt;[4,9]&lt;/code&gt;。 不出所料，&lt;code&gt;[5]&lt;/code&gt;不能再拆分了，但是&lt;code&gt;[4,9]&lt;/code&gt;可以分成&lt;code&gt;[4]&lt;/code&gt;和&lt;code&gt;[9]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拆分最终结果为：&lt;code&gt;[2]`&lt;/code&gt;[1]&lt;code&gt;[5]&lt;/code&gt;[4]&lt;code&gt;&lt;/code&gt;[9]`。 请注意，每个堆只包含一个元素。&lt;/p&gt;
&lt;h3 id=&quot;合并&quot;&gt;&lt;a href=&quot;#合并&quot; class=&quot;headerlink&quot; title=&quot;合并&quot;&gt;&lt;/a&gt;合并&lt;/h3&gt;&lt;p&gt;您已经拆分了数组，您现在应该 &lt;strong&gt;合并并排序&lt;/strong&gt; 拆分后的堆。 请记住，这个想法是解决许多小问题而不是一个大问题。 对于每次合并迭代，您必须关注将一堆与另一堆合并。&lt;/p&gt;
&lt;p&gt;对于堆 &lt;code&gt;[2]&lt;/code&gt; &lt;code&gt;[1]&lt;/code&gt; &lt;code&gt;[5]&lt;/code&gt; &lt;code&gt;[4]&lt;/code&gt; &lt;code&gt;[9]&lt;/code&gt;，第一次合并的结果是&lt;code&gt;[1,2]&lt;/code&gt;和&lt;code&gt;[4,5]&lt;/code&gt; 和&lt;code&gt;[9]&lt;/code&gt;。 由于&lt;code&gt;[9]&lt;/code&gt;的位置落单，所以在合并过程中没有堆与之合并了。&lt;/p&gt;
&lt;p&gt;下一次将合并&lt;code&gt;[1,2]&lt;/code&gt;和&lt;code&gt;[4,5]&lt;/code&gt;。 结果&lt;code&gt;[1,2,4,5]&lt;/code&gt;，再次由于&lt;code&gt;[9]&lt;/code&gt;的位置落单不需要合并。&lt;/p&gt;
&lt;p&gt;只剩下两堆&lt;code&gt;[1,2,4,5]&lt;/code&gt;和&lt;code&gt;[9]&lt;/code&gt;，合并后完成排序的数组为&lt;code&gt;[1,2,4,5,9]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="归并排序" scheme="http://andyron.com/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
