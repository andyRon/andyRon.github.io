<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣欣向戎</title>
  
  <subtitle>AndyRon&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andyron.com/"/>
  <updated>2018-05-29T08:06:18.882Z</updated>
  <id>http://andyron.com/</id>
  
  <author>
    <name>AndyRon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS核心动画小结(swift)</title>
    <link href="http://andyron.com/2018/ios-coreanimation-swift.html"/>
    <id>http://andyron.com/2018/ios-coreanimation-swift.html</id>
    <published>2018-05-29T07:36:52.000Z</published>
    <updated>2018-05-29T08:06:18.882Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所有示例代码都是Swift4，参看文末链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Core Animation是IOS和OS X平台上负责图形渲染与动画的基础框架。Core Animation可以作用与动画视图或者其他可视元素，为你完成了动画所需的大部分绘画工作。你只需要配置少量的动画参数（如开始点的位置和结束点的位置）即可使用Core Animation的动画效果。Core Animation将大部分实际的绘图任务交给了图形硬件来处理，图形硬件会加速图形渲染的速度。这种自动化的图形加速技术让动画拥有更高的帧率并且显示效果更加平滑，不会加重CPU的负担而影响程序的运行速度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-16f8312b54e20cc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Core Animation常用类继承关系&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>向CocoaPods发布代码</title>
    <link href="http://andyron.com/2017/ios-cocoapods-push.html"/>
    <id>http://andyron.com/2017/ios-cocoapods-push.html</id>
    <published>2017-10-08T05:53:50.000Z</published>
    <updated>2017-10-08T06:23:51.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-cdcea9c27584ae4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoapods&lt;/a&gt;是非常好用的一个iOS依赖管理工具，用它来管理和更新项目中的第三库使iOS开发更加方便。&lt;br&gt;使用别人优秀的代码在程序员开发过程中是非常常见的事，为别人贡献代码也是很有必要的事。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="CocoaPods" scheme="http://andyron.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>关于iOS开发中的pch文件</title>
    <link href="http://andyron.com/2017/ios-pch.html"/>
    <id>http://andyron.com/2017/ios-pch.html</id>
    <published>2017-09-26T14:11:06.000Z</published>
    <updated>2017-10-08T06:25:07.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;.pch&lt;/code&gt;文件也是一种头文件，它的内容能被项目中的其他所有源文件共享和访问。是一个预编译文件。&lt;/p&gt;
&lt;h3 id=&quot;pch文件的作用：&quot;&gt;&lt;a href=&quot;#pch文件的作用：&quot; class=&quot;headerlink&quot; title=&quot;pch文件的作用：&quot;&gt;&lt;/a&gt;pch文件的作用：&lt;/h3&gt;&lt;p&gt;1.存放一些全局的宏(整个项目中都用得上的宏)&lt;/p&gt;
&lt;p&gt;2.用来包含一些头文件(整个项目中都用得上的头文件)&lt;/p&gt;
&lt;p&gt;3.能自动打开或者关闭日志输出功能&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="pch" scheme="http://andyron.com/tags/pch/"/>
    
  </entry>
  
  <entry>
    <title>iOS沙盒和文件管理</title>
    <link href="http://andyron.com/2017/ios-sandbox-file.html"/>
    <id>http://andyron.com/2017/ios-sandbox-file.html</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2017-10-08T06:25:33.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-423ab6158c3ad6b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;沙盒&lt;/strong&gt;（sandbox）：iOS系统为每个应用程序创建自己的目录，每个应用程序只能访问自己的目录。&lt;br&gt;所有的非代码文件都要保存在此，例如图像，图标，声音，映像，属性列表，文本文件等。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="sandbox" scheme="http://andyron.com/tags/sandbox/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(六)：SDWebImage的简单使用</title>
    <link href="http://andyron.com/2017/ios-network-6.html"/>
    <id>http://andyron.com/2017/ios-network-6.html</id>
    <published>2017-09-23T12:15:48.000Z</published>
    <updated>2017-10-08T06:25:40.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-27a4683256504565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SDWebImage&lt;/strong&gt;一些知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对远程图片进行缓存管理（磁盘+内存）&lt;/li&gt;
&lt;li&gt;异步加载&lt;/li&gt;
&lt;li&gt;同一个URL图片不会重复下载&lt;/li&gt;
&lt;li&gt;失效的URL不会被无限重试&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="SDWebImage" scheme="http://andyron.com/tags/SDWebImage/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(五)：Cookie的使用</title>
    <link href="http://andyron.com/2017/ios-network-5.html"/>
    <id>http://andyron.com/2017/ios-network-5.html</id>
    <published>2017-09-22T16:00:00.000Z</published>
    <updated>2017-10-08T06:25:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Cookie在Web开发时是非常常用的客户端（浏览器）保存少量信息一种方法。&lt;br&gt;Cookie是网站为了便是终端身份，保存在终端本地的用户凭证信息。Cookie中的字段与意义由服务端进行定义。例如，当用户在某个网站进行了登录操作后，服务端会将Cookie信息返回给终端，终端会将这些信息进行保存，在下一次再次访问这个网站时，终端会将保存的Cookie信息一并发送到服务端，服务端根据Cookie信息是否有效来判断此用户是否可以自动登录。&lt;/p&gt;
&lt;p&gt;在iOS同样也有Cookie，Cookie管理的有两个类：&lt;code&gt;NSHTTPCookieStorage&lt;/code&gt; 和 &lt;code&gt;NSHTTPCookie&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="NSHTTPCookieStorage" scheme="http://andyron.com/tags/NSHTTPCookieStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(二)：NSURLConnection介绍</title>
    <link href="http://andyron.com/2017/ios-network-2.html"/>
    <id>http://andyron.com/2017/ios-network-2.html</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-10-08T06:27:38.000Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsurlconnection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSURLConnection&lt;/a&gt;在iOS7之后基本被NSURLSession，但为了兼容，有必要学习一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网络请求分为同步和异步两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步是指在请求结果返回之前，程序代码会卡在请求处，之后的代码不会被执行，请求返回结果后，之后的代码再执行。&lt;/li&gt;
&lt;li&gt;异步是指在发送请求之后，一边在子线程中接收返回数据，一边执行之后的代码，当返回数据接收完毕后，采用回调的方式通知主线程做处理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="NSURLConnection" scheme="http://andyron.com/tags/NSURLConnection/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(三)：请求类NSURLRequest和请求响应类NSURLResponse介绍</title>
    <link href="http://andyron.com/2017/ios-network-3.html"/>
    <id>http://andyron.com/2017/ios-network-3.html</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-10-08T06:27:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;NSURLSession和NSURLConnection框架，网络请求都是通过NSURLRequest类发起的。&lt;/p&gt;
&lt;p&gt;NSURLRequest请求类除了在初始化时可以设定一些属性，创建出来后则大部分属性都为只读的，无法设置与修改。&lt;code&gt;NSMutableURLRequest&lt;/code&gt;相对而言可以更加灵活的设置请求的相关属性（属性修饰符变化），其他方面没有多少区别。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="NSURLRequest" scheme="http://andyron.com/tags/NSURLRequest/"/>
    
      <category term="NSURLResponse" scheme="http://andyron.com/tags/NSURLResponse/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(四)：缓存类NSURLCache介绍</title>
    <link href="http://andyron.com/2017/ios-network-4.html"/>
    <id>http://andyron.com/2017/ios-network-4.html</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-10-08T06:25:57.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;网络请求中缓存类&lt;code&gt;NSURLCache&lt;/code&gt;常用属性和方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas
      
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="NSURLCache" scheme="http://andyron.com/tags/NSURLCache/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程(一)：NSURLSession介绍</title>
    <link href="http://andyron.com/2017/ios-network-1.html"/>
    <id>http://andyron.com/2017/ios-network-1.html</id>
    <published>2017-09-13T08:22:57.000Z</published>
    <updated>2017-10-08T06:27:45.000Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsurlsession?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSURLSession&lt;/a&gt;是iOS7之后被用来代替NSURLConnection的网络开发框架，前者相对于后者的优势是支持后台处理能力&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="NSURLSession" scheme="http://andyron.com/tags/NSURLSession/"/>
    
  </entry>
  
  <entry>
    <title>使用Charles抓取iOS的http/https请求数据</title>
    <link href="http://andyron.com/2017/ios-charles.html"/>
    <id>http://andyron.com/2017/ios-charles.html</id>
    <published>2017-09-12T15:38:27.000Z</published>
    <updated>2017-09-12T15:39:45.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-b50783080fc7b92e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Charles" scheme="http://andyron.com/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>OC基础学习13：文件加载与保存</title>
    <link href="http://andyron.com/2017/oc-basic-13.html"/>
    <id>http://andyron.com/2017/oc-basic-13.html</id>
    <published>2017-09-12T13:13:34.000Z</published>
    <updated>2017-10-08T06:27:54.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-属性列表-property-list-plist&quot;&gt;&lt;a href=&quot;#1-属性列表-property-list-plist&quot; class=&quot;headerlink&quot; title=&quot;1 属性列表(property list, plist)&quot;&gt;&lt;/a&gt;1 属性列表(property list, plist)&lt;/h3&gt;&lt;p&gt;属性列表可以保存的类型有&lt;code&gt;NSArray&lt;/code&gt;,&lt;code&gt;NSDictionary&lt;/code&gt;,&lt;code&gt;NSString&lt;/code&gt;,&lt;code&gt;NSNumber&lt;/code&gt;,&lt;code&gt;NSDate&lt;/code&gt;,&lt;code&gt;NSDate&lt;/code&gt;以及它们对应的Mutable类。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>OC基础学习12：代码块（Block）</title>
    <link href="http://andyron.com/2017/oc-basic-12.html"/>
    <id>http://andyron.com/2017/oc-basic-12.html</id>
    <published>2017-09-12T13:13:20.000Z</published>
    <updated>2017-10-08T06:27:58.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;代码块&lt;/strong&gt;(Block)/闭包(closure) 是对C语言中函数的扩展。&lt;br&gt;代码块两种类的绑定：&lt;br&gt;自动绑定(automatic binding)    栈内存&lt;br&gt;托管绑定(managed binding)     堆内存&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>OC基础学习11：协议</title>
    <link href="http://andyron.com/2017/oc-basic-11.html"/>
    <id>http://andyron.com/2017/oc-basic-11.html</id>
    <published>2017-09-11T14:43:14.000Z</published>
    <updated>2017-09-11T14:57:46.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-正式协议&quot;&gt;&lt;a href=&quot;#1-正式协议&quot; class=&quot;headerlink&quot; title=&quot;1 正式协议&quot;&gt;&lt;/a&gt;1 正式协议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;声明协议&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>OC基础学习10：类别（category）</title>
    <link href="http://andyron.com/2017/oc-basic-10.html"/>
    <id>http://andyron.com/2017/oc-basic-10.html</id>
    <published>2017-09-11T14:43:00.000Z</published>
    <updated>2017-09-11T14:57:27.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类别（category）是一种为现有的类添加新方法的方式。&lt;/p&gt;
&lt;h3 id=&quot;1-创建类别&quot;&gt;&lt;a href=&quot;#1-创建类别&quot; class=&quot;headerlink&quot; title=&quot;1 创建类别&quot;&gt;&lt;/a&gt;1 创建类别&lt;/h3&gt;&lt;p&gt;一般，只是习惯&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>OC基础学习9：属性</title>
    <link href="http://andyron.com/2017/oc-basic-9.html"/>
    <id>http://andyron.com/2017/oc-basic-9.html</id>
    <published>2017-09-11T14:42:58.000Z</published>
    <updated>2017-10-08T06:28:03.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-使用属性&quot;&gt;&lt;a href=&quot;#1-使用属性&quot; class=&quot;headerlink&quot; title=&quot;1 使用属性&quot;&gt;&lt;/a&gt;1 使用属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;接口代码简化&lt;br&gt;没有使用属性：&lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>OC基础学习8：对象初始化</title>
    <link href="http://andyron.com/2017/oc-basic-8.html"/>
    <id>http://andyron.com/2017/oc-basic-8.html</id>
    <published>2017-09-10T15:50:09.000Z</published>
    <updated>2017-09-10T15:51:49.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-分配-allocation-对象&quot;&gt;&lt;a href=&quot;#1-分配-allocation-对象&quot; class=&quot;headerlink&quot; title=&quot;1 分配(allocation)对象&quot;&gt;&lt;/a&gt;1 分配(allocation)对象&lt;/h3&gt;&lt;p&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="http://andyron.com/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS与JS(一)：使用URL拦截的方式进行JS与OC互相调用</title>
    <link href="http://andyron.com/2017/ios-js-1.html"/>
    <id>http://andyron.com/2017/ios-js-1.html</id>
    <published>2017-09-05T16:00:00.000Z</published>
    <updated>2017-09-09T03:14:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;WKWebView&lt;/code&gt;与&lt;code&gt;UIWebView&lt;/code&gt;之间的区别，本文就不在说明，本文只使用&lt;code&gt;WKWebView&lt;/code&gt;。&lt;br&gt;效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-ac5832118d16b1d4.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS与JS(二)：MessageHandler(OC&amp;Swift)</title>
    <link href="http://andyron.com/2017/ios-js-2.html"/>
    <id>http://andyron.com/2017/ios-js-2.html</id>
    <published>2017-09-05T16:00:00.000Z</published>
    <updated>2017-09-09T03:21:17.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;iOS与JS的相互调用除了URL拦截（&lt;a href=&quot;http://www.jianshu.com/p/e09305d90fba&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS与JS(一)：使用URL拦截的方式进行JS与OC互相调用&lt;/a&gt;）外，还可以使用&lt;code&gt;WKWebView&lt;/code&gt;的中的MessageHandler来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS动画(三)：核心动画中缩放和旋转(Swift)</title>
    <link href="http://andyron.com/2017/ios-animation-3.html"/>
    <id>http://andyron.com/2017/ios-animation-3.html</id>
    <published>2017-09-05T05:04:15.000Z</published>
    <updated>2017-09-09T03:15:58.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1678135-9823da42ea750f05.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原理和上一篇是相同的，不同之处是&lt;code&gt;keyPath&lt;/code&gt;属性，缩放时是&lt;code&gt;keyPath&lt;/code&gt;是 &lt;strong&gt;transform.scale&lt;/strong&gt;，旋转时&lt;code&gt;keyPath&lt;/code&gt;是&lt;strong&gt;transform.rotation&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
