<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣欣向戎</title>
  
  <subtitle>AndyRon&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andyron.com/"/>
  <updated>2019-01-13T02:46:27.861Z</updated>
  <id>http://andyron.com/</id>
  
  <author>
    <name>AndyRon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统学习iOS动画之五：使用UIViewPropertyAnimator</title>
    <link href="http://andyron.com/2019/iOS-Animation-5-UIViewPropertyAnimator.html"/>
    <id>http://andyron.com/2019/iOS-Animation-5-UIViewPropertyAnimator.html</id>
    <published>2019-01-13T02:30:00.000Z</published>
    <updated>2019-01-13T02:46:27.861Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;UIViewPropertyAnimator&lt;/code&gt;是从iOS10开始引入，它能够创建易于交互，可中断和/或可逆的视图动画。&lt;/p&gt;
&lt;p&gt;这个类让某些类型的视图动画更容易创建，值得学习。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIViewPropertyAnimator&lt;/code&gt;可以在同一个类中方便地将许多API包装在一起，这样更容易使用。&lt;/p&gt;
&lt;p&gt;此外，这个新类不能完全取代了&lt;code&gt;UIView.animate(withDuration...)&lt;/code&gt;API集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容预览：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#20-UIViewPropertyAnimator入门&quot;&gt;20-UIViewPropertyAnimator入门&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#21-深入UIViewPropertyAnimator&quot;&gt;21-深入UIViewPropertyAnimator&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#22-用UIViewPropertyAnimator进行交互式动画&quot;&gt;22-用UIViewPropertyAnimator进行交互式动画&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#23-用UIViewPropertyAnimator自定义视图控制器转场&quot;&gt;23-用UIViewPropertyAnimator自定义视图控制器转场&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文的四个章节都是使用同一个项目 &lt;strong&gt;LockSearch&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="UIViewPropertyAnimator" scheme="http://andyron.com/tags/UIViewPropertyAnimator/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-堆</title>
    <link href="http://andyron.com/2019/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%A0%86.html"/>
    <id>http://andyron.com/2019/Swift算法俱乐部-堆.html</id>
    <published>2019-01-11T02:10:00.000Z</published>
    <updated>2019-01-11T02:39:38.725Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。  &lt;/p&gt;
&lt;p&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。  &lt;/p&gt;
&lt;p&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Heap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Heap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz2fdyqh68j30b407sjrb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆(Heap)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅导&lt;a href=&quot;https://www.raywenderlich.com/160631/swift-algorithm-club-heap-and-priority-queue-data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;堆是数组内的&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二叉树&lt;/a&gt;，因此它不使用父/子指针。 堆基于“堆属性”进行排序，“堆属性”确定树中节点的顺序。&lt;/p&gt;
&lt;p&gt;堆的一般用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Priority%20Queue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;优先队列&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;支持&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Heap%20Sort/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;堆排序&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;快速计算集合中最大（或最小）值。&lt;/li&gt;
&lt;li&gt;给你的非程序员朋友留下深刻影响。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://andyron.com/tags/%E5%A0%86/"/>
    
      <category term="Heap" scheme="http://andyron.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-双端队列</title>
    <link href="http://andyron.com/2019/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.html"/>
    <id>http://andyron.com/2019/Swift算法俱乐部-双端队列.html</id>
    <published>2019-01-01T05:44:00.000Z</published>
    <updated>2019-01-01T05:45:54.613Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Deque&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Deque&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;双端队列(Deque)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;出于某种原因，双端队列也被称为“deck”。&lt;/p&gt;
&lt;p&gt;常规&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Queue/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;队列&lt;/a&gt;元素在后面添加（入队），从前面删除（出队）。 除了这些，双端队列还可以在后面出队，从前面入队，并且两端都可查看。&lt;/p&gt;
&lt;p&gt;Swift中双端队列的一个非常基本的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deque&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.isEmpty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; element: T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    array.append(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enqueueFront&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; element: T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    array.insert(element, atIndex: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.removeFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dequeueBack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;peekFront&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;peekBack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array.last&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="双端队列" scheme="http://andyron.com/tags/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="Deque" scheme="http://andyron.com/tags/Deque/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-有序数组</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-有序数组.html</id>
    <published>2018-12-25T04:30:00.000Z</published>
    <updated>2018-12-25T04:28:36.921Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Ordered%20Array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Ordered Array&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;有序数组(Ordered Array)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个始终从低到高排序的数组。 每当您向此数组添加新元素时，它都会插入到其排序位置。&lt;/p&gt;
&lt;p&gt;当您希望对数据进行排序并且相对较少地插入新元素时，有序数组非常有用。在这种情况下，它比排序整个数组更快。但是，如果您需要经常更改数组，则使用常规数组并手动对其进行排序可能会更快。&lt;/p&gt;
&lt;p&gt;实现是非常基础的。 它只是Swift内置数组的包装器：&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="有序数组" scheme="http://andyron.com/tags/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    
      <category term="Ordered Array" scheme="http://andyron.com/tags/Ordered-Array/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-固定大小数组</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F%E6%95%B0%E7%BB%84.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-固定大小数组.html</id>
    <published>2018-12-25T03:30:00.000Z</published>
    <updated>2018-12-25T04:26:42.740Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Fixed%20Size%20Array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Fixed-Size Arrays&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;固定大小数组(Fixed-Size Arrays)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早期的编程语言没有非常奇特的数组。 您将创建具有固定大小的数组，从那时起它将永远不会增长或缩小。 甚至C和Objective-C中的标准数组仍然是这种类型。&lt;/p&gt;
&lt;p&gt;当您定义这样的数组时，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int myArray[10];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译器分配一个可以容纳40个字节的连续内存块（假设&lt;code&gt;int&lt;/code&gt;是4个字节）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/Fixed%20Size%20Array/Images/array.png&quot; alt=&quot;An array with room for 10 elements&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="固定大小数组" scheme="http://andyron.com/tags/%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F%E6%95%B0%E7%BB%84/"/>
    
      <category term="Fixed-Size Arrays" scheme="http://andyron.com/tags/Fixed-Size-Arrays/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-快速排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-快速排序.html</id>
    <published>2018-12-23T03:30:00.000Z</published>
    <updated>2018-12-23T08:38:45.601Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Quicksort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Quicksort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;快速排序(Quicksort)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目标：将数组从低到高（或从高到低）排序。&lt;/p&gt;
&lt;p&gt;快速排序是历史上最着名的算法之一。 它是由Tony Hoare于1959年发明的，当时递归仍然是一个相当模糊的概念。&lt;/p&gt;
&lt;p&gt;这是Swift中的一个实现，应该很容易理解：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quicksort&lt;/span&gt;&amp;lt;T: Comparable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; a: [T])&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; a.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pivot = a[a.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; less = a.&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt; pivot &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;equal&lt;/span&gt; = a.&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; == pivot &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; greater = a.&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;gt; pivot &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quicksort(less) + &lt;span class=&quot;built_in&quot;&gt;equal&lt;/span&gt; + quicksort(greater)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="快速排序" scheme="http://andyron.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="Quicksort" scheme="http://andyron.com/tags/Quicksort/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之七：其它类型的动画</title>
    <link href="http://andyron.com/2018/iOS-Animation-7-other-Animations.html"/>
    <id>http://andyron.com/2018/iOS-Animation-7-other-Animations.html</id>
    <published>2018-12-18T09:22:00.000Z</published>
    <updated>2018-12-27T03:56:24.411Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面学习很多动画方面的知识，但有两个更专业的主题不适合前面的任何部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预览：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#26-粒子发射器&quot;&gt;26-粒子发射器&lt;/a&gt; —— 学习如何创建粒子发射器并创建以下降雪效果。       &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#27-UIImageView的帧动画&quot;&gt;27-UIImageView的帧动画&lt;/a&gt; ——  通过将帧动画与传统视图动画相结合，创建类似卡通的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之六：3D动画</title>
    <link href="http://andyron.com/2018/iOS-Animation-6-3D-Animations.html"/>
    <id>http://andyron.com/2018/iOS-Animation-6-3D-Animations.html</id>
    <published>2018-12-17T08:22:00.000Z</published>
    <updated>2018-12-27T03:56:12.522Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到目前为止，之前的文章只使用了二维动画——这是在平面设备屏幕上动画元素的最自然方式。 毕竟，从iOS 7扁平化后的世界中的按钮，文本字段，开关和图像没有了第三维; 这些元素存在于由X和Y轴定义的平面中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fx962j0d7jj309a03g0sj.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心动画&lt;/strong&gt;可以帮助我们摆脱这个二维世界; 虽然它不是真正的3D框架，但&lt;strong&gt;核心动画&lt;/strong&gt;有很多好的方法可以帮助我们在3D空间中描绘二维对象。&lt;/p&gt;
&lt;p&gt;换句话说，图层和动画仍然以二维方式进行描绘，但可以在3D空间中旋转和定位每个元素的2D平面，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fx9630g50tj30ab04jdfv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面显示的是在3D空间中旋转的两个2D图像。 透视变形使我们可以从渲染器的角度了解它们的位置。&lt;/p&gt;
&lt;p&gt;本文将学习如何在3D空间中定位和旋转图层。&lt;code&gt;CATransform3D&lt;/code&gt;类似于&lt;code&gt;CGAffineTransform&lt;/code&gt;，但除了在x和y方向上缩放，倾斜和平移之外，它还带来了第三维：z。 z轴直接从设备屏幕朝向您的眼睛。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="3D动画" scheme="http://andyron.com/tags/3D%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之四：视图控制器的转场动画</title>
    <link href="http://andyron.com/2018/iOS-Animation-4-View-Controller-Transition-Animations.html"/>
    <id>http://andyron.com/2018/iOS-Animation-4-View-Controller-Transition-Animations.html</id>
    <published>2018-12-16T04:22:00.000Z</published>
    <updated>2018-12-27T03:56:07.179Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前学习了视图动画、图层动画、自动布局动画等。这个部分让视野更大一点，学习整个视图控制器的动画，&lt;strong&gt;视图控制器的转场动画(View Controller Transition Animations)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;iOS中最容易识别的动画之一是将新视图控制器推入导航堆栈的动画，当我们想让APP有自己的特色，自定义转场动画是非常好的方式。&lt;/p&gt;
&lt;p&gt;在本文，将学习如何使用动画创建自己的自定义视图控制器转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预览：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#17-视图控制器转场和屏幕旋转转场&quot;&gt;17-视图控制器转场和屏幕旋转转场&lt;/a&gt;   了解如何通过自定义动画转场&lt;strong&gt;呈现&lt;/strong&gt;视图控制器 - 作为奖励，您将创建动画转场以处理设备方向更改。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#18-导航控制器转场&quot;&gt;18-导航控制器转场&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#19-交互式导航控制器转场&quot;&gt;19-交互式导航控制器转场&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;17-视图控制器转场和屏幕旋转转场&quot;&gt;&lt;a href=&quot;#17-视图控制器转场和屏幕旋转转场&quot; class=&quot;headerlink&quot; title=&quot;17-视图控制器转场和屏幕旋转转场&quot;&gt;&lt;/a&gt;17-视图控制器转场和屏幕旋转转场&lt;/h2&gt;&lt;p&gt;无论是&lt;strong&gt;呈现&lt;/strong&gt; 照相机视图控制器、地址簿还是自定义的模态屏幕，每次都调用相同的&lt;strong&gt;UIKit&lt;/strong&gt;方法：&lt;code&gt;present(_:animated:completion:)&lt;/code&gt;。 此方法将当前屏幕“放弃”，然后跳到另一个视图控制器。&lt;/p&gt;
&lt;p&gt;下图呈现一个“New Contact”视图控制器向上滑动以覆盖当前视图（联系人列表），这是默认的动画方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fxshdgh771j308k0a1gm3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="转场" scheme="http://andyron.com/tags/%E8%BD%AC%E5%9C%BA/"/>
    
      <category term="视图控制器的转场动画" scheme="http://andyron.com/tags/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
      <category term="View Controller Transition Animations" scheme="http://andyron.com/tags/View-Controller-Transition-Animations/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之三：图层动画</title>
    <link href="http://andyron.com/2018/iOS-Animation-3-Layer-Animations.html"/>
    <id>http://andyron.com/2018/iOS-Animation-3-Layer-Animations.html</id>
    <published>2018-12-15T12:22:00.000Z</published>
    <updated>2018-12-27T03:56:02.595Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-1-view-animation&quot;&gt;系统学习iOS动画之一：视图动画&lt;/a&gt; 学习了创建视图动画（View Animations），这一部分学习功能更强大、更偏底层的&lt;strong&gt;Core Animation(核心动画)&lt;/strong&gt; APIs。核心动画的这个名字可能令人有点误解，暂时可以理解为本文的标题&lt;strong&gt;图层动画(Layer Animations)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在本书的这一部分中，将学习动画层而不是视图以及如何使用特殊图层。&lt;/p&gt;
&lt;p&gt;图层是一个简单的模型类，它公开了许多属性来表示一些基于图像的内容。 每个&lt;code&gt;UIView&lt;/code&gt;都有一个图层支持(都有一个&lt;code&gt;layer&lt;/code&gt;属性)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视图 vs 图层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于以下原因，图层(Layers)与视图(Views)（对于动画）不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图层是一个模型对象 —— 它公开数据属性并且不实现任何逻辑。 它没有复杂的自动布局依赖关系，也不用处理用户交互。&lt;/li&gt;
&lt;li&gt;图层具有预定义的可见特征 —— 这些特征是许多影响内容在屏幕上呈现的数据属性，例如边框线，边框颜色，位置和阴影。&lt;/li&gt;
&lt;li&gt;最后，&lt;strong&gt;Core Animation&lt;/strong&gt;优化了图层内容的缓存并直接在&lt;strong&gt;GPU&lt;/strong&gt;上快速绘图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单个来说，两者的优点。&lt;/p&gt;
&lt;p&gt;视图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂视图层次结构布局，自动布局等。&lt;/li&gt;
&lt;li&gt;用户交互。&lt;/li&gt;
&lt;li&gt;通常具有在CPU上的主线程上执行的自定义逻辑或自定义绘图代码。&lt;/li&gt;
&lt;li&gt;非常灵活，功能强大，子类很多类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更简单的层次结构，更快地解决布局，绘制速度更快。&lt;/li&gt;
&lt;li&gt;没有响应者链开销。&lt;/li&gt;
&lt;li&gt;默认情况下没有自定义逻辑 并直接在GPU上绘制。&lt;/li&gt;
&lt;li&gt;不那么灵活，子类的类更少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图和图层的选择技巧： &lt;strong&gt;任何时候都可以选择视图动画; 当需要更高的性能时，就需要使用图层动画。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者在架构中的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxdhuq4gvcj30eo0aumxf.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="图层动画" scheme="http://andyron.com/tags/%E5%9B%BE%E5%B1%82%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Layer Animations" scheme="http://andyron.com/tags/Layer-Animations/"/>
    
      <category term="核心动画" scheme="http://andyron.com/tags/%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之二：自动布局</title>
    <link href="http://andyron.com/2018/iOS-Animation-2-Auto-Layout.html"/>
    <id>http://andyron.com/2018/iOS-Animation-2-Auto-Layout.html</id>
    <published>2018-12-14T12:22:00.000Z</published>
    <updated>2018-12-27T03:55:57.802Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;自动布局(Auto Layout)&lt;/strong&gt; 在iOS 6中首次推出，已经存在了一段时间，每次发布新版本的iOS和Xcode都经历了一系列成功的迭代。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动布局&lt;/strong&gt;背后的核心理念非常简单：它允许您根据布局中的每个元素之间创建的关系来定义应用程序的UI元素的布局。&lt;/p&gt;
&lt;p&gt;我们平常开发时已将自动布局用于静态的布局，在本文中将学习使用约束来设置动画。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="自动布局" scheme="http://andyron.com/tags/%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    
      <category term="Auto Layout" scheme="http://andyron.com/tags/Auto-Layout/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之一：视图动画</title>
    <link href="http://andyron.com/2018/iOS-Animation-1-view-animation.html"/>
    <id>http://andyron.com/2018/iOS-Animation-1-view-animation.html</id>
    <published>2018-12-13T12:22:00.000Z</published>
    <updated>2019-01-13T02:37:13.488Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我学习&lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 笔记中的一篇。&lt;br&gt;文中详细代码都放在我的Github上 &lt;a href=&quot;https://github.com/andyRon/LearniOSAnimations/tree/master/iOS_Animations_by_Tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/LearniOSAnimations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个部分介绍&lt;strong&gt;UIKit动画API&lt;/strong&gt;，这些API专门用于轻松制作&lt;strong&gt;视图动画(View Animations)&lt;/strong&gt;，同时避免&lt;strong&gt;核心动画(Core Animation)&lt;/strong&gt;(见&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-3-Layer-Animations&quot;&gt;系统学习iOS动画之三：图层动画&lt;/a&gt;)的复杂性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UIKit动画&lt;/strong&gt;API不仅易于使用，而且提供了大量灵活性和强大功能，可以处理大多数（当然不是全部）动画要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UIKit动画&lt;/strong&gt;API可以在屏幕上为最终继承自&lt;code&gt;UIView&lt;/code&gt;的任何对象设置动画，例如：&lt;code&gt;UILabel&lt;/code&gt;，&lt;code&gt;UIImageView&lt;/code&gt;，&lt;code&gt;UIButton&lt;/code&gt;等等，也可以是自己创建的任何自定义最终继承自&lt;code&gt;UIView&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;本文包括五个章节，完成两个项目&lt;strong&gt;BahamaAirLoginScreen&lt;/strong&gt;和&lt;strong&gt;Flight Info&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;BahamaAirLoginScreen&lt;/em&gt; 是一个登录页面项目，1、2、3章节为这个项目的一些UI添加各种动画。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#1-视图动画入门&quot;&gt;1-视图动画入门&lt;/a&gt; —— 学习如何移动，缩放和淡化视图等基本的UIKit API。&lt;br&gt;&lt;a href=&quot;#2-弹簧动画&quot;&gt;2-弹簧动画&lt;/a&gt; —— 在线性动画的概念基础上，使用弹簧动画创造出更引人注目的效果。😊&lt;br&gt;&lt;a href=&quot;#3-过渡动画&quot;&gt;3-过渡动画&lt;/a&gt; —— 视图的出现和消失。      &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Flight Info&lt;/em&gt; 是一个航班状态变化项目，4、5章节用一些高级一点动画来完成这个项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#4-练习视图动画&quot;&gt;4-练习视图动画&lt;/a&gt; —— 练习前面学到的动画技术。&lt;br&gt;&lt;a href=&quot;#5-关键帧动画&quot;&gt;5-关键帧动画&lt;/a&gt; —— 使用关键帧动画来创建由许多不同阶段组成的复杂动画。  &lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
      <category term="View Animation" scheme="http://andyron.com/tags/View-Animation/"/>
    
      <category term="视图动画" scheme="http://andyron.com/tags/%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>系统学习iOS动画之零：说明和目录</title>
    <link href="http://andyron.com/2018/iOS-Animation-0.html"/>
    <id>http://andyron.com/2018/iOS-Animation-0.html</id>
    <published>2018-12-12T12:22:00.000Z</published>
    <updated>2019-01-13T02:37:58.616Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;动画制作很有趣，可以为用户界面注入活力。 如果使用得当，动画可以向用户传达信息，并将用户注意力吸引到界面的重要部分。&lt;/p&gt;
&lt;p&gt;之前也做过一些iOS动画，但一直没有系统学习过，这次我用&lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RW网站&lt;/a&gt;的书 &lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 来系统地学习iOS动画。这本书的内容和项目不复杂但很全，基本上iOS动画的各个方面都介绍了。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://store.raywenderlich.com/products/ios-animations-by-tutorials&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《iOS Animations by Tutorials》&lt;/a&gt; 全书分为7个部分，27小章节，内容非常丰富，我对应7个部分分别总结为7篇文章，有几篇文章可能比较长，特别是动图比较多，用手机看的小伙伴请慎重，对自己温柔一点🥴。&lt;/p&gt;
&lt;p&gt;开发环境：&lt;strong&gt;Xcode 10.1, Swift 4.2, macOS Mojave 10.14.1&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;目录可以很好看清整体脉络，每一篇文章的开始我也列出了小章节的题目，这样可以系统的学习iOS动画，那边有问题也好及时发先并对应到系统点上。要不可能越学越乱，这方面我自己深有体会的😕🤔。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-1-view-animation&quot;&gt;系统学习iOS动画之一：视图动画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-2-Auto-Layout&quot;&gt;系统学习iOS动画之二：自动布局动画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-3-Layer-Animations&quot;&gt;系统学习iOS动画之三：图层动画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-4-View-Controller-Transition-Animations&quot;&gt;系统学习iOS动画之四：视图控制器的转场动画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2019/iOS-Animation-5-UIViewPropertyAnimator&quot;&gt;系统学习iOS动画之五：使用UIViewPropertyAnimator&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-6-3D-Animations&quot;&gt;系统学习iOS动画之六：3D动画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andyron.com/2018/iOS-Animation-7-other-Animations&quot;&gt;系统学习iOS动画之七：其它类型的动画&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="iOS-Animation" scheme="http://andyron.com/categories/iOS-Animation/"/>
    
    
      <category term="iOS动画" scheme="http://andyron.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-AVL树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-AVL%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-AVL树.html</id>
    <published>2018-12-09T02:58:00.000Z</published>
    <updated>2019-01-11T02:12:33.892Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/AVL%20Tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/AVL Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;AVL树(AVL Tree)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AVL树是&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search%20Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二叉搜索树&lt;/a&gt;的自平衡形式，其中子树的高度最多只相差1。&lt;/p&gt;
&lt;p&gt;当二叉树的左右子树包含大致相同数量的节点时，称树是 &lt;em&gt;平衡的&lt;/em&gt;。 这就是使树搜索速度非常快的原因。 但是如果二元搜索树不平衡，搜索会变得非常慢。&lt;/p&gt;
&lt;p&gt;这是一个不平衡树的例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/AVL%20Tree/Images/Unbalanced.png&quot; alt=&quot;Unbalanced tree&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="AVL树" scheme="http://andyron.com/tags/AVL%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>读《以幽默的方式过一生》</title>
    <link href="http://andyron.com/2018/%E4%BB%A5%E5%B9%BD%E9%BB%98%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%87%E4%B8%80%E7%94%9F.html"/>
    <id>http://andyron.com/2018/以幽默的方式过一生.html</id>
    <published>2018-12-04T01:22:30.000Z</published>
    <updated>2018-12-04T02:09:33.387Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自由&quot;&gt;&lt;a href=&quot;#自由&quot; class=&quot;headerlink&quot; title=&quot;自由&quot;&gt;&lt;/a&gt;自由&lt;/h2&gt;&lt;p&gt;选择是人的终极自由。 &lt;/p&gt;
&lt;p&gt;因为相对于亚当和夏娃犯错这件事来说，给他们犯错的权利和自由更重要，也就是人类的自由意志。&lt;/p&gt;
&lt;p&gt;你可以选择善，也可以选择恶。&lt;/p&gt;
&lt;p&gt;所有的伟大，都源于一个勇敢的开始。&lt;/p&gt;
&lt;h2 id=&quot;职业&quot;&gt;&lt;a href=&quot;#职业&quot; class=&quot;headerlink&quot; title=&quot;职业&quot;&gt;&lt;/a&gt;职业&lt;/h2&gt;&lt;p&gt;不能有感觉了才开始行动。身为小姐，不能有感觉了再接客。&lt;/p&gt;
&lt;p&gt;一个优秀的人，一定是在任何地方都表现出自己的优秀。&lt;/p&gt;
&lt;p&gt;所谓职业，就是不管有没有欲望、灵感或状态，随时都可以让自己进入那个角色，在过程中找到感觉。当然，如有可能，尽量让自己体会到快乐。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-二叉搜索树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二叉搜索树.html</id>
    <published>2018-12-01T03:30:00.000Z</published>
    <updated>2018-12-01T03:42:05.300Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search%20Tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Binary Search Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-905dc1c1ccb31281.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二叉搜索树(Binary Search Tree, BST)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅助&lt;a href=&quot;https://www.raywenderlich.com/139821/swift-algorithm-club-swift-binary-search-tree-data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二叉搜索树（或者叫做二分搜索树）是一种特殊的&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二叉树&lt;/a&gt;（每个节点最多有两个子节点），它执行插入和删除，以便始终对树进行排序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;译注：&lt;/strong&gt; sort，平常都可以理解为从大到小或从小到大的排序，但本文有点不同，可以理解为是按一定规则的整理。因为“排序”在汉语中也不是简单理解为从大到小或从小到大，所以我还是把sort翻译成&lt;em&gt;排序&lt;/em&gt;，但注意和平常理解的排序有点不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有关树的更多信息，&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;请先阅读&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉搜索树" scheme="http://andyron.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
      <category term="Binary Search Tree" scheme="http://andyron.com/tags/Binary-Search-Tree/"/>
    
      <category term="BST" scheme="http://andyron.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-哈希表</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%93%88%E5%B8%8C%E8%A1%A8.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-哈希表.html</id>
    <published>2018-11-15T10:10:00.000Z</published>
    <updated>2018-11-15T10:12:48.499Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Hash%20Table&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Hash Table&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;哈希表(Hash Table)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哈希表允许您通过“键”存储和检索对象。&lt;/p&gt;
&lt;p&gt;哈希表用于实现一些结构，例如字典，映射和关联数组。 这些结构可以通过树或普通数组实现，但使用哈希表效率更高。&lt;/p&gt;
&lt;p&gt;这也可以解释为什么Swift的内置&lt;code&gt;Dictionary&lt;/code&gt;类型要求键符合&lt;code&gt;Hashable&lt;/code&gt;协议：在内部&lt;code&gt;Dictionary&lt;/code&gt;使用哈希表实现，就像你将在这里学到的那样。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希表" scheme="http://andyron.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="Hash Table" scheme="http://andyron.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>读《思考，快与慢》—— 直觉快速解决大部分事情，慢下来理性解决小部分麻烦</title>
    <link href="http://andyron.com/2018/%E6%80%9D%E8%80%83%EF%BC%8C%E5%BF%AB%E4%B8%8E%E6%85%A2.html"/>
    <id>http://andyron.com/2018/思考，快与慢.html</id>
    <published>2018-11-10T04:06:00.000Z</published>
    <updated>2018-11-10T05:51:49.533Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-f5f01c4af0d49d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;思考，快与慢&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;丹尼尔·卡尼曼&lt;/strong&gt;，美国普林斯顿大学教授，历史上第一位获得诺贝尔经济学奖的心理学家（2002年），&lt;strong&gt;行为经济学&lt;/strong&gt;的鼻祖。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10785583/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《思考，快与慢》&lt;/a&gt;是行为经济学流派的经典力作，运用心理学理论和经济学分析结合的方法，第一次对于影响个人和群体经济决策的偏见问题进行深入分析。它认为人并不是理性的经济动物，相反在很多情况下并不理性，&lt;strong&gt;偏见&lt;/strong&gt;与生俱来，与直觉紧密相关。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="行为经济学" scheme="http://andyron.com/tags/%E8%A1%8C%E4%B8%BA%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
      <category term="偏见" scheme="http://andyron.com/tags/%E5%81%8F%E8%A7%81/"/>
    
      <category term="快思考" scheme="http://andyron.com/tags/%E5%BF%AB%E6%80%9D%E8%80%83/"/>
    
      <category term="慢思考" scheme="http://andyron.com/tags/%E6%85%A2%E6%80%9D%E8%80%83/"/>
    
      <category term="锚定效应" scheme="http://andyron.com/tags/%E9%94%9A%E5%AE%9A%E6%95%88%E5%BA%94/"/>
    
      <category term="典型性偏好" scheme="http://andyron.com/tags/%E5%85%B8%E5%9E%8B%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="光环效应" scheme="http://andyron.com/tags/%E5%85%89%E7%8E%AF%E6%95%88%E5%BA%94/"/>
    
      <category term="可得性偏好" scheme="http://andyron.com/tags/%E5%8F%AF%E5%BE%97%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="因果性偏好" scheme="http://andyron.com/tags/%E5%9B%A0%E6%9E%9C%E6%80%A7%E5%81%8F%E5%A5%BD/"/>
    
      <category term="框架效应" scheme="http://andyron.com/tags/%E6%A1%86%E6%9E%B6%E6%95%88%E5%BA%94/"/>
    
      <category term="禀赋效应" scheme="http://andyron.com/tags/%E7%A6%80%E8%B5%8B%E6%95%88%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-链表</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E9%93%BE%E8%A1%A8.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-链表.html</id>
    <published>2018-11-08T10:33:00.000Z</published>
    <updated>2018-11-08T10:37:18.312Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linked%20List&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Linked List&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-d7d3d78ad3f0af28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表(Linked List)&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个主题已经有辅导&lt;a href=&quot;https://www.raywenderlich.com/144083/swift-algorithm-club-swift-linked-list-data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;链表是一系列数据项，就像数组一样。 数组分配了一大块内存来存储对象，而链表中的元素在内存中是完全独立的对象，并通过链接连接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------+    +--------+    +--------+    +--------+
|        |    |        |    |        |    |        |
| node 0 |---&amp;gt;| node 1 |---&amp;gt;| node 2 |---&amp;gt;| node 3 |
|        |    |        |    |        |    |        |
+--------+    +--------+    +--------+    +--------+
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://andyron.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS-tutorial-16：TravelVlogs——使用AVKit和AVFoundation创建视频应用</title>
    <link href="http://andyron.com/2018/ios-tutorial-16-TravelVlogs.html"/>
    <id>http://andyron.com/2018/ios-tutorial-16-TravelVlogs.html</id>
    <published>2018-11-07T11:21:17.000Z</published>
    <updated>2018-12-22T06:13:57.127Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TravelVlogs项目是介绍如何使用AVKit和AVFoundation框架构建简单的视频流应用。&lt;/p&gt;
&lt;h2 id=&quot;预览图&quot;&gt;&lt;a href=&quot;#预览图&quot; class=&quot;headerlink&quot; title=&quot;预览图&quot;&gt;&lt;/a&gt;预览图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-4d2e3d6beb13a837.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andyron.com/categories/iOS/"/>
    
      <category term="iOS tutorial" scheme="http://andyron.com/categories/iOS/iOS-tutorial/"/>
    
    
      <category term="AVKit" scheme="http://andyron.com/tags/AVKit/"/>
    
      <category term="AVFoundation" scheme="http://andyron.com/tags/AVFoundation/"/>
    
  </entry>
  
</feed>
