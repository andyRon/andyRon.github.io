<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣欣向戎</title>
  
  <subtitle>AndyRon&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andyron.com/"/>
  <updated>2018-10-10T02:34:47.626Z</updated>
  <id>http://andyron.com/</id>
  
  <author>
    <name>AndyRon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】Swift算法俱乐部-二叉树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二叉树.html</id>
    <published>2018-10-10T02:20:00.000Z</published>
    <updated>2018-10-10T02:34:47.626Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swift-algorithm-club-cn/Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;二叉树是一种&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;树&lt;/a&gt;，其中每个节点具有0,1或2个子节点。 这是一个二叉树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/Binary%20Tree/Images/BinaryTree.png&quot; alt=&quot;一个二叉树&quot;&gt;&lt;/p&gt;
&lt;p&gt;子节点通常称为 &lt;em&gt;左&lt;/em&gt; 子节点 和 &lt;em&gt;右&lt;/em&gt; 子节点。 如果节点没有任何子节点，则称为 &lt;em&gt;叶子&lt;/em&gt;节点。 &lt;em&gt;根&lt;/em&gt; 是树顶部的节点（程序员习惯树颠倒了😀）。&lt;/p&gt;
&lt;p&gt;节点通常会有一个返回其父节点的连接，但这不是绝对必要的。&lt;/p&gt;
&lt;p&gt;二叉树通常用作&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search%20Tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二叉搜索树&lt;/a&gt;。 在这种情况下，节点必须按特定顺序排列（左侧是较小的值，右侧是较大的值）。 但这不是所有二叉树的要求。&lt;/p&gt;
&lt;p&gt;例如，这是一个二叉树，表示一系列算术运算，&lt;code&gt;(5 * (a - 10)) + (-4 * (3 / b))&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/andyRon/swift-algorithm-club-cn/raw/master/Binary%20Tree/Images/Operations.png&quot; alt=&quot;一个二叉树&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://andyron.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-查找最大／最小值</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%EF%BC%8F%E6%9C%80%E5%B0%8F%E5%80%BC.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-查找最大／最小值.html</id>
    <published>2018-10-07T12:31:00.000Z</published>
    <updated>2018-10-07T12:33:55.922Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Select%20Minimum%20Maximum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Select Minimum Maximum&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：查找未排序数组中的最大/最小值。&lt;/p&gt;
&lt;h2 id=&quot;最大值或最小值&quot;&gt;&lt;a href=&quot;#最大值或最小值&quot; class=&quot;headerlink&quot; title=&quot;最大值或最小值&quot;&gt;&lt;/a&gt;最大值或最小值&lt;/h2&gt;&lt;p&gt;我们有一个通用对象数组，我们迭代所有对象，跟踪遇到的最小/最大元素。&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;假设我们想在未排序列表&lt;code&gt;[8,3,9,4,6]&lt;/code&gt;中找到最大值。&lt;/p&gt;
&lt;p&gt;选择第一个数字&lt;code&gt;8&lt;/code&gt;，并将其存储作为目前为止的最大元素。&lt;/p&gt;
&lt;p&gt;从列表中选择下一个数字&lt;code&gt;3&lt;/code&gt;，并将其与当前最大值进行比较。 &lt;code&gt;3&lt;/code&gt;小于&lt;code&gt;8&lt;/code&gt;所以最大值&lt;code&gt;8&lt;/code&gt;不会改变。&lt;/p&gt;
&lt;p&gt;从列表中选择下一个数字&lt;code&gt;9&lt;/code&gt;，并将其与当前最大值进行比较。 &lt;code&gt;9&lt;/code&gt;大于&lt;code&gt;8&lt;/code&gt;所以我们存储&lt;code&gt;9&lt;/code&gt;作为最大值。&lt;/p&gt;
&lt;p&gt;重复此过程，直到处理完列表中的所有元素。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;在Swift中的一个简单实现：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minimum&lt;/span&gt;&amp;lt;T: Comparable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; array: [T])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minimum = array.first &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array.&lt;span class=&quot;built_in&quot;&gt;dropFirst&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minimum = element &amp;lt; minimum ? element : minimum&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minimum&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maximum&lt;/span&gt;&amp;lt;T: Comparable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; array: [T])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maximum = array.first &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array.&lt;span class=&quot;built_in&quot;&gt;dropFirst&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    maximum = element &amp;gt; maximum ? element : maximum&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maximum&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="查找最大／最小值" scheme="http://andyron.com/tags/%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%EF%BC%8F%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>读《科学是怎样败给迷信的》——迷信有时简直太可怕了</title>
    <link href="http://andyron.com/2018/%E7%A7%91%E5%AD%A6%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B4%A5%E7%BB%99%E8%BF%B7%E4%BF%A1%E7%9A%84.html"/>
    <id>http://andyron.com/2018/科学是怎样败给迷信的.html</id>
    <published>2018-10-07T08:58:30.000Z</published>
    <updated>2018-10-07T09:50:54.720Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-9f3568efcd8dd54b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;约翰·伯纳姆&lt;/strong&gt;是美国俄亥俄州立大学历史系教授，还曾经是美国医学史学会的主席，也是科学传播史方面的专家。他的主要研究领域包括美国医学史、科学史和社会史，在历史学、医学和科学领域的许多重要期刊上都发表过文章，还出版了十余本科学史著作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1873519/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《科学是怎样败给迷信的：美国的科学与卫生普及》&lt;/a&gt; 研究美国从1830年起的科学普及史，揭示了这样一个令人迷惑的现象：曾经作为一种积极、进步的文化力量的科学，在美国消费文化中，慢慢地为新伪装下的迷信和神秘主义的复活让出了一条通道，最终导致科学在大众层面上被迷信击败。作者以19、20世纪美国的科学普及史为经，以公共卫生、心理学和自然科学三个领域内的普及活动为纬，向读者展现了一部美国的科学与迷信的“战斗史”。&lt;/p&gt;
&lt;p&gt;面对迷信的泛滥，作者敏锐地指出，科学之所以败给迷信，就是因为&lt;strong&gt;科学知识的传播出现了问题&lt;/strong&gt;。阅读这本书，不但能帮助我们&lt;strong&gt;分辨朋友圈中的各种谣言和迷信，还能启发我们建立起一种跨越自然科学和社会科学的大视角&lt;/strong&gt;。🌰：各种养生保健的“小技巧”、各种占星相面风水手相的“小知识”、甚至转发求转运的锦鲤……数不胜数。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>读《睡眠革命》——睡眠质量直接影响生活和工作质量</title>
    <link href="http://andyron.com/2018/%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD.html"/>
    <id>http://andyron.com/2018/睡眠革命.html</id>
    <published>2018-10-07T03:58:30.000Z</published>
    <updated>2018-10-07T09:03:23.533Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-39a2685008e3d55b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h2&gt;&lt;p&gt;尼克·利特尔黑尔斯，英国睡眠协会的前任会长、英超曼联队御用的运动睡眠教练，曾经给 NBA、英国天空车队、英式橄榄球联合会、美国国家橄榄球联盟、英超足球联赛选手、奥运会英国代表队、皇家马德里足球俱乐部做睡眠指导。很多世界级顶级体育名将，比如足球名将大卫·贝克汉姆、瑞恩·吉格斯、保罗·斯科尔斯、尼基·巴特和内维尔兄弟等，都采纳了其睡眠方案，他们的工作和生活的质量都得到了提升。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/27023900/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《睡眠革命》&lt;/a&gt;的精髓是&lt;strong&gt;如何让睡眠变得高效，把睡眠当作一个工具，增强智力和体力。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;睡眠占据了我们整个生命三分之一左右的时间，非常有必要认真对待。&lt;/p&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;h3 id=&quot;一、如何打造一个合适的睡眠环境&quot;&gt;&lt;a href=&quot;#一、如何打造一个合适的睡眠环境&quot; class=&quot;headerlink&quot; title=&quot;一、如何打造一个合适的睡眠环境&quot;&gt;&lt;/a&gt;一、如何打造一个合适的睡眠环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/褪黑素&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;褪黑素&lt;/a&gt;是人体的一种激素，能够帮助人体进入睡眠。正常来说，夜间人体会分泌比白天多5-10倍的褪黑素，但因为现代生活的各种光线的影响，会让褪黑素的分泌减少，久而久之就影响睡眠。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-选择排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-选择排序.html</id>
    <published>2018-09-28T01:57:00.000Z</published>
    <updated>2018-09-28T02:24:28.252Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Selection%20Sort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Selection Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：将数组从低到高（或从高到低）排序。&lt;/p&gt;
&lt;p&gt;您将获得一系列需要按正确顺序排列的数字。 选择排序算法将数组分为两部分：数组的开头是排序的，数组的其余部分是仍然需要排序的数字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ ...sorted numbers... | ...unsorted numbers... ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这类似于&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Insertion%20Sort/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插入排序&lt;/a&gt;，但区别在于如何将新数字添加到已排序部分。&lt;/p&gt;
&lt;p&gt;它的工作原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到数组中的最小数字。 从索引0开始，遍历数组中的所有数字，并追踪最小数字的位置。&lt;/li&gt;
&lt;li&gt;使用索引0处的数字交换最小数字。现在，已排序部分仅包含索引0处的数字。&lt;/li&gt;
&lt;li&gt;转到索引1处。&lt;/li&gt;
&lt;li&gt;找到数组其余部分中的最小数字。 从索引1开始查看。再次循环直到数组结束并追踪最小数字。&lt;/li&gt;
&lt;li&gt;使用索引1处的数字交换最小数字。现在，已排序部分包含两个数字，索引0和索引1。&lt;/li&gt;
&lt;li&gt;转到索引2处。&lt;/li&gt;
&lt;li&gt;从索引2开始，找到数组其余部分中的最小数字，并将其与索引2处的数字交换。现在，数组从索引0到2已排序; 此范围包含数组中的三个最小数字。&lt;/li&gt;
&lt;li&gt;并继续，直到没有数字需要排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种排序方式之所以被称为“选择”排序，是因为在每个步骤中，都是在数组的其余部分里搜索选择下一个最小数字。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="选择排序" scheme="http://andyron.com/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-二维数组</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二维数组.html</id>
    <published>2018-09-25T01:31:00.000Z</published>
    <updated>2018-09-28T02:24:25.635Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Array2D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Array2D&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在C和Objective-C中，您可以编写下面代码，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int cookies[9][7];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;制作9x7网格的cookies。 这将创建一个包含63个元素的二维数组。 要在第3列和第6行找到cookie，您可以写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myCookie = cookies[3][6];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码在Swift中不能成立的。 要在Swift中创建一个多维数组，您可以编写：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cookies = [[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; row = [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    row.append(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  cookies.append(row)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，要查找cookie，您可以写：&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二维数组" scheme="http://andyron.com/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-树</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%A0%91.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-树.html</id>
    <published>2018-09-24T03:51:00.000Z</published>
    <updated>2018-09-28T02:24:19.013Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Tree&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅导&lt;a href=&quot;https://www.raywenderlich.com/138190/swift-algorithm-club-swift-tree-data-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;树表示对象之间的层次关系。 这是一个树的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-6de5f684447d3f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;树由节点组成，这些节点彼此连接。&lt;/p&gt;
&lt;p&gt;节点可以连接到他们的子节点，也可以连接到他们的父节点。 子节点是给定节点下的节点; 父节点是上面的节点。 节点始终只有一个父节点，但可以有多个子节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-dc7624f2f8b15ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A tree&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="tree" scheme="http://andyron.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-统计出现次数</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E7%BB%9F%E8%AE%A1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-统计出现次数.html</id>
    <published>2018-09-23T09:46:00.000Z</published>
    <updated>2018-09-28T02:24:10.428Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Count%20Occurrences&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Count Occurrences&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;目标：计算某个值在数组中出现的次数。&lt;/p&gt;
&lt;p&gt;显而易见的方法是从数组的开头直到结束的&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linear%20Search/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线性搜索&lt;/a&gt;，计算您遇到该值的次数。 这是一个 &lt;strong&gt;O(n)&lt;/strong&gt; 算法。&lt;/p&gt;
&lt;p&gt;但是，如果数组已经排过序的，则可以通过使用修改&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二分搜索&lt;/a&gt;来更快的完成这个任务，时间复杂度为&lt;strong&gt;O(logn)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设我们有以下数组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11 ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想知道值&lt;code&gt;3&lt;/code&gt;出现的次数，我们可以进行常规二分搜索。 这可以获得四个&lt;code&gt;3&lt;/code&gt;索引中的一个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 0, 1, 1, 3, 3, 3, 3, 6, 8, 10, 11, 11 ]
           *  *  *  *
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="统计出现次数" scheme="http://andyron.com/tags/%E7%BB%9F%E8%AE%A1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-归并排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-归并排序.html</id>
    <published>2018-09-23T07:47:00.000Z</published>
    <updated>2018-10-07T12:31:22.778Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Merge%20Sort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Merge Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这个主题已经有辅导&lt;a href=&quot;https://www.raywenderlich.com/154256/swift-algorithm-club-swift-merge-sort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标：将数组从低到高（或从高到低）排序&lt;/p&gt;
&lt;p&gt;归并排序是1945年由John von Neumann发明的，是一种有效的算法，最佳、最差和平均时间复杂度都是&lt;strong&gt;O(n log n)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;归并排序算法使用&lt;strong&gt;分而治之&lt;/strong&gt;方法，即将一个大问题分解为较小的问题并解决它们。 归并排序算法可分为 &lt;strong&gt;先拆分&lt;/strong&gt; 和 &lt;strong&gt;后合并&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设您需要按正确的顺序对长度为 &lt;em&gt;n&lt;/em&gt; 的数组进行排序。 归并排序算法的工作原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数字放在未排序的堆中。&lt;/li&gt;
&lt;li&gt;将堆分成两部分。 那么现在就有&lt;strong&gt;两个未排序的数字堆&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;继续分裂&lt;strong&gt;两个未排序的数字堆&lt;/strong&gt;，直到你不能分裂为止。 最后，你将拥有 &lt;em&gt;n&lt;/em&gt; 个堆，每堆中有一个数字。&lt;/li&gt;
&lt;li&gt;通过顺序配对，开始 &lt;strong&gt;合并&lt;/strong&gt; 堆。 在每次合并期间，将内容按排序顺序排列。 这很容易，因为每个单独的堆已经排序（译注：单个数字没有所谓的顺序，就是排好序的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;h3 id=&quot;拆分&quot;&gt;&lt;a href=&quot;#拆分&quot; class=&quot;headerlink&quot; title=&quot;拆分&quot;&gt;&lt;/a&gt;拆分&lt;/h3&gt;&lt;p&gt;假设给你一个长度为&lt;em&gt;n&lt;/em&gt;的未排序数组：&lt;code&gt;[2,1,5,4,9]&lt;/code&gt;。 目标是不断拆分堆，直到你不能拆分为止。&lt;/p&gt;
&lt;p&gt;首先，将数组分成两半：&lt;code&gt;[2,1]&lt;/code&gt;和&lt;code&gt;[5,4,9]&lt;/code&gt;。 你能继续拆分吗？ 是的你可以！&lt;/p&gt;
&lt;p&gt;专注于左边堆。 将&lt;code&gt;[2,1]&lt;/code&gt;拆分为&lt;code&gt;[2]&lt;/code&gt;和&lt;code&gt;[1]&lt;/code&gt;。 你能继续拆分吗？ 不能了。检查右边的堆。&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;[5,4,9]&lt;/code&gt;拆分为&lt;code&gt;[5]&lt;/code&gt;和&lt;code&gt;[4,9]&lt;/code&gt;。 不出所料，&lt;code&gt;[5]&lt;/code&gt;不能再拆分了，但是&lt;code&gt;[4,9]&lt;/code&gt;可以分成&lt;code&gt;[4]&lt;/code&gt;和&lt;code&gt;[9]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拆分最终结果为：&lt;code&gt;[2]``[1]``[5]``[4]``[9]&lt;/code&gt;。 请注意，每个堆只包含一个元素。&lt;/p&gt;
&lt;h3 id=&quot;合并&quot;&gt;&lt;a href=&quot;#合并&quot; class=&quot;headerlink&quot; title=&quot;合并&quot;&gt;&lt;/a&gt;合并&lt;/h3&gt;&lt;p&gt;您已经拆分了数组，您现在应该 &lt;strong&gt;合并并排序&lt;/strong&gt; 拆分后的堆。 请记住，这个想法是解决许多小问题而不是一个大问题。 对于每次合并迭代，您必须关注将一堆与另一堆合并。&lt;/p&gt;
&lt;p&gt;对于堆 &lt;code&gt;[2]&lt;/code&gt; &lt;code&gt;[1]&lt;/code&gt; &lt;code&gt;[5]&lt;/code&gt; &lt;code&gt;[4]&lt;/code&gt; &lt;code&gt;[9]&lt;/code&gt;，第一次合并的结果是&lt;code&gt;[1,2]&lt;/code&gt;和&lt;code&gt;[4,5]&lt;/code&gt; 和&lt;code&gt;[9]&lt;/code&gt;。 由于&lt;code&gt;[9]&lt;/code&gt;的位置落单，所以在合并过程中没有堆与之合并了。&lt;/p&gt;
&lt;p&gt;下一次将合并&lt;code&gt;[1,2]&lt;/code&gt;和&lt;code&gt;[4,5]&lt;/code&gt;。 结果&lt;code&gt;[1,2,4,5]&lt;/code&gt;，再次由于&lt;code&gt;[9]&lt;/code&gt;的位置落单不需要合并。&lt;/p&gt;
&lt;p&gt;只剩下两堆&lt;code&gt;[1,2,4,5]&lt;/code&gt;和&lt;code&gt;[9]&lt;/code&gt;，合并后完成排序的数组为&lt;code&gt;[1,2,4,5,9]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="归并排序" scheme="http://andyron.com/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-线性搜索</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E7%BA%BF%E6%80%A7%E6%90%9C%E7%B4%A2.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-线性搜索.html</id>
    <published>2018-09-18T18:20:00.000Z</published>
    <updated>2018-09-28T02:24:16.060Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linear%20Search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Linear Search&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-6fb15436aa3d81c1.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Linear Search&quot;&gt;&lt;/p&gt;
&lt;p&gt;目标：在数组中查找特定值。&lt;/p&gt;
&lt;p&gt;我们有一组通用对象。 通过线性搜索，我们迭代数组中的所有对象，并将每个对象与我们正在寻找的对象进行比较。 如果两个对象相等，我们停止并返回当前对象在数组中的索引。 如果不相等，只要数组中还有对象，我们就会继续寻找下一个。&lt;/p&gt;
&lt;h2 id=&quot;一个例子&quot;&gt;&lt;a href=&quot;#一个例子&quot; class=&quot;headerlink&quot; title=&quot;一个例子&quot;&gt;&lt;/a&gt;一个例子&lt;/h2&gt;&lt;p&gt;假设我们有一个数组&lt;code&gt;[5,2,4,7]&lt;/code&gt;，我们想检查数组是否包含数字&lt;code&gt;2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们首先将数组中的第一个数字&lt;code&gt;5&lt;/code&gt;与我们正在寻找的数字&lt;code&gt;2&lt;/code&gt;进行比较。 它们显然不一样，所以我们继续比较下一个数组元素。&lt;/p&gt;
&lt;p&gt;我们将数组中的数字&lt;code&gt;2&lt;/code&gt;与数字&lt;code&gt;2&lt;/code&gt;进行比较，注意到它们是相等的。 现在我们可以停止迭代并返回1，这是数组中数字&lt;code&gt;2&lt;/code&gt;的索引。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线性搜索" scheme="http://andyron.com/tags/%E7%BA%BF%E6%80%A7%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-二分搜索</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-二分搜索.html</id>
    <published>2018-09-18T17:22:00.000Z</published>
    <updated>2018-09-28T02:24:27.014Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Binary%20Search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Binary Search&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-ce8f3414be0fbe16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Binary Search&quot;&gt;&lt;/p&gt;
&lt;p&gt;目标：在数组中快速寻找一个元素。&lt;/p&gt;
&lt;p&gt;假设你有一个数字数组，你想确定一个特定的数字是否在该数组中，如果在，那么获得这个数字的索引。&lt;/p&gt;
&lt;p&gt;对于上面的情况，Swift的&lt;code&gt;indexOf()&lt;/code&gt;函数足够完成：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;numbers.indexOf(&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// returns 15&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内置的&lt;code&gt;indexOf()&lt;/code&gt;函数执行的是&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Linear%20Search/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线性搜索&lt;/a&gt;。代码大概是：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;linearSearch&lt;/span&gt;&amp;lt;T: Equatable&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; a: [T], &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: T)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ..&amp;lt; a.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a[i] == key &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二分搜索" scheme="http://andyron.com/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-插入排序</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-插入排序.html</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2018-09-28T02:24:22.506Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Insertion%20Sort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Insertion Sort&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-356b8d2db83067f0.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;插入排序动画&quot;&gt;&lt;/p&gt;
&lt;p&gt;目标：把数组从低到高（或从高到低）排序&lt;/p&gt;
&lt;p&gt;您将获得按正确的顺序排列一系列数字。插入排序算法的工作原理如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把一系列数字放在一个未排序的堆里。&lt;/li&gt;
&lt;li&gt;从堆中挑选一个数字。 你选择哪一个并不重要，但从堆顶挑选是最容易。&lt;/li&gt;
&lt;li&gt;把这个数插入一个新的数组。&lt;/li&gt;
&lt;li&gt;从未排序堆中再选择一个数字，并将其插入之前的数组中。 这个数字在第一个数字之前或之后，所以现在这两个数字被排序。&lt;/li&gt;
&lt;li&gt;再从堆中选择一个数字，并将其插入到数组中的正确排序位置。&lt;/li&gt;
&lt;li&gt;继续这样做，直到堆里没有数字。 最终得到一个空堆和一个排序的数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是为什么这被称为“插入”排序，因为你从堆中取一个数字并将其插入数组中的正确排序位置。&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;假设这边有需要排序的一些数字  &lt;code&gt;[ 8, 3, 5, 4, 6 ]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;选择第一个数字&lt;code&gt;8&lt;/code&gt;，然后将其插入新数组中。 新数组是空的，所以插入很容易。 排序的数组现在是&lt;code&gt;[8]&lt;/code&gt;，堆是&lt;code&gt;[3,5,4,6]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从堆中选择下一个数字&lt;code&gt;3&lt;/code&gt;，然后将其插入到已排序的数组中。 &lt;code&gt;3&lt;/code&gt;应该在&lt;code&gt;8&lt;/code&gt;之前，所以排序的数组现在是&lt;code&gt;[3,8]&lt;/code&gt;，而堆被缩减为&lt;code&gt;[5,4,6]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从堆中选择下一个数字&lt;code&gt;5&lt;/code&gt;，然后将其插入到已排序的数组中。 &lt;code&gt;5&lt;/code&gt;介于&lt;code&gt;3&lt;/code&gt;和&lt;code&gt;8&lt;/code&gt;之间。 排序的数组是&lt;code&gt;[3,5,8]&lt;/code&gt;，堆是&lt;code&gt;[4,6]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;重复上面的过程直到堆为空。&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="插入排序" scheme="http://andyron.com/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-队列</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E9%98%9F%E5%88%97.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-队列.html</id>
    <published>2018-09-16T10:41:55.000Z</published>
    <updated>2018-09-28T02:24:07.988Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Queue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Queue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅导&lt;a href=&quot;https://www.raywenderlich.com/148141/swift-algorithm-club-swift-queue-data-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;队列的本质是一个数组，但只能从队尾添加元素，从队首移除元素。这保证了第一个入队的元素总是第一个出队。先到先得！&lt;/p&gt;
&lt;p&gt;为什么要这样做呢？在很多算法的实现中，你可能需要将某些对象放到一个临时的列表中，之后再将其取出。通常加入和取出元素的顺序非常重要。&lt;/p&gt;
&lt;p&gt;队列可以保证元素存入和取出的顺序是先进先出(first-in first-out, FIFO)的，第一个入队的元素总是第一个出队，公平合理！&lt;br&gt;另外一个非常类似的数据结构是&lt;a href=&quot;../Stack/&quot;&gt;栈&lt;/a&gt;，它是一个后进先出(last-in, first-out, LIFO)的结构。&lt;/p&gt;
&lt;p&gt;举例来说，我们将一个数字入队：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;queue.enqueue(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;队列现在为 &lt;code&gt;[ 10 ]&lt;/code&gt;。再将下一个数字入队：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;queue.enqueue(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;队列现在为 &lt;code&gt;[ 10, 3 ]&lt;/code&gt;。再加入一个数字：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;queue.enqueue(&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;队列现在为 &lt;code&gt;[ 10, 3, 57 ]&lt;/code&gt;。现在我们将第一个元素出队：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;queue.dequeue()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-栈</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E6%A0%88.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-栈.html</id>
    <published>2018-09-15T16:00:00.000Z</published>
    <updated>2018-09-28T02:24:20.714Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。由于能力有限，如发现错误或翻译不妥，请指正，欢迎pull request。也欢迎有兴趣、有时间的小伙伴一起参与翻译和学习🤓。当然也欢迎加⭐️，🤩🤩🤩🤨🤪。&lt;br&gt;本文的翻译原文和代码可以查看🐙&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Stack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-algorithm-club-cn/Stack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这个话题已经有个辅导&lt;a href=&quot;https://www.raywenderlich.com/149213/swift-algorithm-club-swift-stack-data-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;栈类似于数组，但是限制了存取操作的灵活性。栈只允许使用者从栈顶 &lt;strong&gt;压入(push)&lt;/strong&gt; 元素；从栈顶 &lt;strong&gt;弹出(pop)&lt;/strong&gt; 元素；&lt;strong&gt;取得(peek)&lt;/strong&gt; 栈顶元素，但不弹出。&lt;/p&gt;
&lt;p&gt;这样的限制有什么意义呢？在很多算法的实现中，你可能需要将某些对象放到一个临时的列表中，之后再将其取出。通常加入和取出元素的顺序非常重要。&lt;/p&gt;
&lt;p&gt;栈可以保证元素存入和取出的顺序是后进先出(last-in first-out, LIFO)的。栈中弹出的元素总是你最后放进去的那个。另外一个非常类似的数据结构是&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Queue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;队列&lt;/a&gt;，它是一个先进先出(first-in, first-out, FIFO)的结构。&lt;/p&gt;
&lt;p&gt;举例来说，我们先将一个数字压入栈中：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;stack.push(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;栈现在是 &lt;code&gt;[10]&lt;/code&gt;。压入下一个数字：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;stack.push(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;栈现在是 &lt;code&gt;[10, 3]&lt;/code&gt;。再压入一个数字：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;stack.push(&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;栈现在是 &lt;code&gt;[10, 3, 57]&lt;/code&gt;。现在把栈顶的数字弹出来：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;stack.pop()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这行代码返回 &lt;code&gt;57&lt;/code&gt;，因为它是我们最后压入的元素。现在栈又变成了 &lt;code&gt;[10, 3]&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;stack.pop()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://andyron.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>读《拖延心理学》——认识拖延，找到应对策略</title>
    <link href="http://andyron.com/2018/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6.html"/>
    <id>http://andyron.com/2018/拖延心理学.html</id>
    <published>2018-09-14T16:00:00.000Z</published>
    <updated>2018-09-23T08:21:03.559Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;初次阅读时间：2016.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-590de9597eefbf80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;作者和本书概要&quot;&gt;&lt;a href=&quot;#作者和本书概要&quot; class=&quot;headerlink&quot; title=&quot;作者和本书概要&quot;&gt;&lt;/a&gt;作者和本书概要&lt;/h1&gt;&lt;p&gt;简·博克和莱诺拉·袁她们两人是心理学博士、美国加利福尼亚大学的资深心理咨询师。 从1979年开始就为学生中的拖延者创设了第一个团体治疗课程，曾经出现在《奥普拉》和《20/20》等电视节目中，同时也是《纽约时报》、《今日美国》、《洛杉矶时报》、《人物》和《当代心理学》等出版物的专访对象。 一直致力于为全美国的学生、公司组织和公众团体提供治疗的心理工作坊和专题演讲方面的服务，终年活跃在伯克利、斯坦福大学的讲坛。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4180711/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《拖延心理学》&lt;/a&gt; ，副标题: 向与生俱来的行为顽症宣战，原作名: Procrastination: Why You Do It, What To Do About It Now。&lt;/p&gt;
&lt;p&gt;拖延是普遍存在的，从我阅读本书的过程中也能体会到。我们需要认识拖延，知道它背后原因，找到应对策略，然后完善自我。本书非常详细的分析了拖延的方方面面。&lt;/p&gt;
&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拖延从根本上来说并不是一个时间管理方面的问题，也不是一个道德问题，而是一个&lt;strong&gt;复杂的心理问题&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拖延的问题是一个人跟自身如何相处的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多时候对一些事情弃之不理反而对你最为有利&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;当我们按照自己真实的样子而不是按照自己希望的样子来接受自己的时候，我们才能以最有利于我们的方式来采取行动，而不是生活在拖延的无边阴影之下。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://andyron.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="拖延" scheme="http://andyron.com/tags/%E6%8B%96%E5%BB%B6/"/>
    
      <category term="心理学" scheme="http://andyron.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-算法设计技巧</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-算法设计技巧.html</id>
    <published>2018-09-14T11:41:55.000Z</published>
    <updated>2018-09-14T12:07:11.468Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。欢迎有兴趣学习算法和数据结构，有时间的小伙伴一起参与翻译，欢迎issue，或者直接提交pull request。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你遇到新问题的时候，需要寻找新的算法。&lt;/p&gt;
&lt;h3 id=&quot;是否有类似的其它问题？&quot;&gt;&lt;a href=&quot;#是否有类似的其它问题？&quot; class=&quot;headerlink&quot; title=&quot;是否有类似的其它问题？&quot;&gt;&lt;/a&gt;是否有类似的其它问题？&lt;/h3&gt;&lt;p&gt;如果您可以根据另一个更普遍的问题来构建解决你目前需要解决问题，那么您可以使用现有算法。 为什么重新发明轮子？&lt;/p&gt;
&lt;p&gt;我喜欢Steven Skiena的&lt;a href=&quot;http://www.algorist.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;算法设计手册&lt;/a&gt;，它包含了一系列可以尝试的问题和解决方案。(另见Steven Skiena的&lt;a href=&quot;http://www3.cs.stonybrook.edu/~algorith/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;算法库&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译注：豆瓣 &lt;a href=&quot;https://book.douban.com/subject/4048566/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;算法设计手册&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-大O表示法</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-大O表示法.html</id>
    <published>2018-09-14T10:09:21.000Z</published>
    <updated>2018-09-17T04:51:58.461Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。欢迎有兴趣学习算法和数据结构，有时间的小伙伴一起参与翻译，欢迎issue，或者直接提交pull request。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-514c3ef55574c28b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;知道某个算法的运行速度和占用的内存空间，对于选择正确的算法来解决问题非常有帮助。&lt;/p&gt;
&lt;p&gt;大O表示法 能让你对一个算法的运行时间和占用内存有个大概概念。当有人说，“这个算法在最糟情况下的运行时间是 &lt;strong&gt;O(n^2)&lt;/strong&gt;，而且占用了 &lt;strong&gt;O(n)&lt;/strong&gt; 大小的空间”时，他的意思是这个算法有点慢，不过没占多大内存。&lt;/p&gt;
&lt;p&gt;要知道一个算法的大O 表示法通常要通过数学分析。在这里我们不会涉及具体的数学，不过知道不同的值意味着什么会很有用。所以这里有一张方便的表。&lt;strong&gt;n&lt;/strong&gt; 在这里代表的意思是数据的个数。举个例子，当对一个有 100 个元素的数组进行排序时，&lt;strong&gt;n = 100&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Big-O表示符号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;名字&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;常数级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最好的&lt;/strong&gt;。不论输入数据量有多大，这个算法的运行时间总是一样的。例子: 基于索引取出数组中对应的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(log n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对数级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;相当好&lt;/strong&gt;。这种算法每次循环时会把需要处理的数据量减半。如果你有 100 个元素，则只需要七步就可以找到答案。1000 个元素只要十步。100,0000 元素只要二十步。即便数据量很大这种算法也非常快。例子：二分查找。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;线性级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;还不错&lt;/strong&gt;。如果你有 100 个元素，这种算法就要做 100 次工作。数据量翻倍那么运行时间也翻倍。例子：线性查找。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(n log n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;线性对数级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;还可以&lt;/strong&gt;。比线性级差了一些，不过也没那么差劲。例子：最快的通用排序算法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(n^2)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;二次方级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有点慢&lt;/strong&gt;。如果你有 100 个元素，这种算法需要做 100^2 = 10000 次工作。数据量 x 2 会导致运行时间 x 4 (因为 2 的 2 次方等于 4)。例子：循环套循环的算法，比如插入排序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(n^3)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;三次方级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;特别慢&lt;/strong&gt;。如果你有 100 个元素，那么这种算法就要做 100^3 = 100,0000 次工作。数据量 x 2 会导致运行时间 x 8。例子：矩阵乘法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(2^n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;指数级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;超级慢&lt;/strong&gt;。这种算法你要想方设法避免，但有时候你就是没得选。加一点点数据就会把运行时间成倍的加长。例子：旅行商问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;O(n!)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;阶乘级&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;比蜗牛还慢&lt;/strong&gt;！不管干什么都要跑个 N 年才能得到结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="Big-O" scheme="http://andyron.com/tags/Big-O/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-为什么要学习算法与数据结构？</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-为什么要学习算法与数据结构？.html</id>
    <published>2018-09-14T10:09:01.000Z</published>
    <updated>2018-09-14T12:06:49.014Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。欢迎有兴趣学习算法和数据结构，有时间的小伙伴一起参与翻译，欢迎issue，或者直接提交pull request。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你已经写过一些代码，你也许就会好奇学习算法和数据结构的意义何在，特别是如果你没有接受过计算机科学专业的高等教育。&lt;/p&gt;
&lt;p&gt;毕竟，在平时的编码工作中，到底会有多少机会需要自己亲自编写一个链表或排序算法呢？答案是：可能永远都不会。&lt;/p&gt;
&lt;h4 id=&quot;然而…&quot;&gt;&lt;a href=&quot;#然而…&quot; class=&quot;headerlink&quot; title=&quot;然而…&quot;&gt;&lt;/a&gt;&lt;strong&gt;然而…&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;了解一点现有算法解决问题时所用的奇技淫巧可能会给予你启发，让你能更好地优化自己的代码。&lt;/p&gt;
&lt;p&gt;除了自带的标准数组和字典之外，了解一些其它的数据结构让你在构建自己的 App 时拥有更多的选择。&lt;/p&gt;
&lt;p&gt;学习算法和数据结构会助你成为更好的开发者！（当然也就意味了可以赚到更多的$$$）&lt;/p&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【译】Swift算法俱乐部-什么是算法和数据结构？</title>
    <link href="http://andyron.com/2018/Swift%E7%AE%97%E6%B3%95%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F.html"/>
    <id>http://andyron.com/2018/Swift算法俱乐部-什么是算法和数据结构？.html</id>
    <published>2018-09-14T10:08:23.000Z</published>
    <updated>2018-09-14T12:07:02.125Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt; 翻译的一篇文章。&lt;br&gt;&lt;a href=&quot;https://github.com/raywenderlich/swift-algorithm-club&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Algorithm Club&lt;/a&gt;是 &lt;a href=&quot;https://www.raywenderlich.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich.com&lt;/a&gt;网站出品的用Swift实现算法和数据结构的开源项目，目前在GitHub上有18000+⭐️，我初略统计了一下，大概有一百左右个的算法和数据结构，基本上常见的都包含了，是iOSer学习算法和数据结构不错的资源。&lt;br&gt;&lt;a href=&quot;https://github.com/andyRon/swift-algorithm-club-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;andyRon/swift-algorithm-club-cn&lt;/a&gt;是我对Swift Algorithm Club，边学习边翻译的项目。欢迎有兴趣学习算法和数据结构，有时间的小伙伴一起参与翻译，欢迎issue，或者直接提交pull request。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是算法和数据结构？&quot;&gt;&lt;a href=&quot;#什么是算法和数据结构？&quot; class=&quot;headerlink&quot; title=&quot;什么是算法和数据结构？&quot;&gt;&lt;/a&gt;什么是算法和数据结构？&lt;/h1&gt;&lt;p&gt;一个算法就像一张教计算机“烹饪”的“食谱”。如果你了解做菜的过程，你就能理解算法的定义。&lt;/p&gt;
&lt;p&gt;下面有一张关于&lt;a href=&quot;http://allrecipes.com/recipe/21014/good-old-fashioned-pancakes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;制作薄饼的食谱&lt;/a&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个大碗里，将面粉，发酵粉，盐和糖过筛。&lt;/li&gt;
&lt;li&gt;加入牛奶、鸡蛋和融化了的奶油。&lt;/li&gt;
&lt;li&gt;搅拌混合直至丝柔顺滑。&lt;/li&gt;
&lt;li&gt;中火加热平底锅。&lt;/li&gt;
&lt;li&gt;将搅拌好的面糊缓慢倒入锅中，每个薄饼大概用1/4杯的面糊即可。&lt;/li&gt;
&lt;li&gt;薄饼两面都呈黄褐色即可出锅享用了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift-algorithm-club-cn" scheme="http://andyron.com/categories/swift-algorithm-club-cn/"/>
    
    
      <category term="swift" scheme="http://andyron.com/tags/swift/"/>
    
      <category term="算法与数据结构" scheme="http://andyron.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于字符编码</title>
    <link href="http://andyron.com/2018/ascii-unicode-utf8.html"/>
    <id>http://andyron.com/2018/ascii-unicode-utf8.html</id>
    <published>2018-09-14T05:38:37.000Z</published>
    <updated>2018-09-16T09:16:43.910Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1678135-5a5b48c70bb23657.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ASCII码表&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为一名程序员，对编码问题有必要了解一下。计算机是以二进制形式存储数据的，至于为什么选择二进制，这可能就需要从计算机的诞生历史说起了，这不是现在关注的点。&lt;/p&gt;
    
    </summary>
    
      <category term="暂时没想到怎么分类" scheme="http://andyron.com/categories/%E6%9A%82%E6%97%B6%E6%B2%A1%E6%83%B3%E5%88%B0%E6%80%8E%E4%B9%88%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ASCII" scheme="http://andyron.com/tags/ASCII/"/>
    
      <category term="Unicode" scheme="http://andyron.com/tags/Unicode/"/>
    
      <category term="UTF8" scheme="http://andyron.com/tags/UTF8/"/>
    
  </entry>
  
</feed>
