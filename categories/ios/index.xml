<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOS on 欣欣向戎</title>
    <link>https://andyron.top/categories/ios/</link>
    <description>Recent content in IOS on 欣欣向戎</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Jul 2024 12:36:01 +0800</lastBuildDate>
    <atom:link href="https://andyron.top/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Xcode中图标含义总结</title>
      <link>https://andyron.top/blog/2019/08/xcode-icon-summary.html/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://andyron.top/blog/2019/08/xcode-icon-summary.html/</guid>
      <description>Xcode中不少有点图标和符号，平常使用不怎么注意，仔细思考🤔一下，有的还不清楚啥意思，这边我做个小小的归纳。 按照显示位置，大概分为以下四类</description>
    </item>
    <item>
      <title>iOS-tutorial-16：TravelVlogs——使用AVKit和AVFoundation创建视频应用</title>
      <link>https://andyron.top/blog/2018/11/ios-tutorial-16-travelvlogs.html/</link>
      <pubDate>Wed, 07 Nov 2018 19:21:17 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/11/ios-tutorial-16-travelvlogs.html/</guid>
      <description>TravelVlogs项目是介绍如何使用AVKit和AVFoundation框架构建简单的视频流应用。 预览图 代码 TravelVlogs 注意点 AVKit 介绍 一个有用的开发</description>
    </item>
    <item>
      <title>关于iOS多线程，这边勉强可以看看(OC&amp;Swift)</title>
      <link>https://andyron.top/blog/2018/08/ios-multithreading.html/</link>
      <pubDate>Sun, 26 Aug 2018 16:29:06 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-multithreading.html/</guid>
      <description>iOS开发多线程总是绕不过的坎，看了很多前辈们优秀的文章，如：关于iOS多线程，我说，你听，没准你就懂了！、谈iOS多线程(NSThread</description>
    </item>
    <item>
      <title>OC中的键/值编码(KVC)</title>
      <link>https://andyron.top/blog/2018/08/ios-oc-kvc-begin.html/</link>
      <pubDate>Fri, 24 Aug 2018 19:50:59 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-oc-kvc-begin.html/</guid>
      <description>1. KVC 的定义 键/值编码(Key-value coding，KVC) 可以允许开发者通过Key名访问对象的属性或给对象的属性赋值, 而不需要调用明确的</description>
    </item>
    <item>
      <title>iOS数据持久化小结</title>
      <link>https://andyron.top/blog/2018/08/ios-persistdata.html/</link>
      <pubDate>Thu, 23 Aug 2018 23:23:29 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-persistdata.html/</guid>
      <description>持久化就是把数据保存在硬盘上而不是内存里，程序重启后数据不会消失。iOS中数据持久化方法有：plist文件（属性列表）、UserDefaul</description>
    </item>
    <item>
      <title>初识iOS事情处理机制</title>
      <link>https://andyron.top/blog/2018/08/ios-event-begin.html/</link>
      <pubDate>Thu, 23 Aug 2018 12:20:02 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-event-begin.html/</guid>
      <description>事件的生命周期： 事件的产生和传递（事件如何从父控件传递到子控件并寻找到最合适的view、寻找最合适的view的底层实现、拦截事件的处理）-&amp;</description>
    </item>
    <item>
      <title>iOS tutorial 15：实现计算器界面布局--Masonry和SnapKit的学习</title>
      <link>https://andyron.top/blog/2018/08/ios-tutorial-15.html/</link>
      <pubDate>Fri, 17 Aug 2018 22:26:08 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-tutorial-15.html/</guid>
      <description>Masonry和SnapKit分别是OC、Swift的界面布局框架，而且开发者相同。 分别用这两个框架实现一个简单计算器界面： 完全代码：Lea</description>
    </item>
    <item>
      <title>iOS tutorial 14：简单的下拉菜单 -- dropDownMenu</title>
      <link>https://andyron.top/blog/2018/08/ios-tutorial-14.html/</link>
      <pubDate>Fri, 17 Aug 2018 22:21:17 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/ios-tutorial-14.html/</guid>
      <description>详细代码： dropDownMenu 按钮dropDownBtn: class dropDownBtn: UIButton, dropDownProtocol { func dropDownPressed(string: String) { self.setTitle(string, for: .normal) self.dismissDropDown() } var dropView = dropDownView() var height = NSLayoutConstraint() override init(frame: CGRect) { super.init(frame: frame) self.backgroundColor = UIColor.darkGray dropView = dropDownView.init(frame: CGRect.init(x: 0, y: 0, width: 0, height: 0)) dropView.translatesAutoresizingMaskIntoConstraints = false dropView.delegate = self } //</description>
    </item>
    <item>
      <title>整理之前学的iOS小项目合集——LearniOSByProject</title>
      <link>https://andyron.top/blog/2018/08/learniosbyproject.html/</link>
      <pubDate>Sat, 11 Aug 2018 10:48:16 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/08/learniosbyproject.html/</guid>
      <description>介绍 **LearniOSByProject**本来是自己学习iOS时的一些非常简单小例子，小项目，或者我个人博客AndyRon&amp;rsquo;</description>
    </item>
    <item>
      <title>iOS开发关于沙盒</title>
      <link>https://andyron.top/blog/2018/06/ios-sandbox.html/</link>
      <pubDate>Mon, 04 Jun 2018 10:43:26 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/06/ios-sandbox.html/</guid>
      <description>每个iOS程序都有一个独立的文件系统（存储空间），而且只能在对应的文件系统中进行操作，此区域被称为沙盒。应用必须待在自己的沙盒里，其他应用不</description>
    </item>
    <item>
      <title>OC中的成员变量，实例变量，属性变量</title>
      <link>https://andyron.top/blog/2018/06/oc-property-variables.html/</link>
      <pubDate>Fri, 01 Jun 2018 11:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/06/oc-property-variables.html/</guid>
      <description>1 2 3 4 5 6 7 8 @interface MyViewController :UIViewControlle { UIButton *yourButton; int count; id data； } @property (nonatomic, strong) UIButton *myButton; @end 1. 成员变量 成员变量是定义在｛｝号中的变量。（yourButton、count、da</description>
    </item>
    <item>
      <title>iOS开发：学习Runtime</title>
      <link>https://andyron.top/blog/2018/06/ios-runtime-begin.html/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/06/ios-runtime-begin.html/</guid>
      <description>学习iOS开发，runtime这个知识点是绕不过去的，但对于我这种学习OC不是太久，写OC的量不够多的人来说，抽象理解runtime的概念或</description>
    </item>
    <item>
      <title>Masonry学习</title>
      <link>https://andyron.top/blog/2018/05/masonry-begin.html/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      <guid>https://andyron.top/blog/2018/05/masonry-begin.html/</guid>
      <description>Masonry是一个轻量级的OC布局框架， 拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了，并具有高可读性，而且同时支持 iOS 和 Max</description>
    </item>
    <item>
      <title>OC基础学习：访问修饰符</title>
      <link>https://andyron.top/blog/2017/10/oc-access-modifier.html/</link>
      <pubDate>Thu, 26 Oct 2017 15:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/oc-access-modifier.html/</guid>
      <description>用来修饰属性，可以限定对象的属性在那一段范围之中访问。 @private : 只能在本类的内部访问。 @protected: 只能在本类以及其子类中访问，默认。 @package: 当前框架中访问。 @public: 在任</description>
    </item>
    <item>
      <title>OC基础学习：内存中的区域</title>
      <link>https://andyron.top/blog/2017/10/oc-memory-area.html/</link>
      <pubDate>Thu, 26 Oct 2017 14:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/oc-memory-area.html/</guid>
      <description>OC中，内存一般分为五大区域 栈 存储局部变量和实参 由编译器自动分配释放 存储空间有限 地址是连续的 地址分配从大到小 访问速度快 堆 允许程序员自己申请的</description>
    </item>
    <item>
      <title>OC基础学习：类方法和对象方法的调用过程</title>
      <link>https://andyron.top/blog/2017/10/oc-class-method-instance-method.html/</link>
      <pubDate>Thu, 26 Oct 2017 12:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/oc-class-method-instance-method.html/</guid>
      <description>类方法中不能直接访问属性。 在类方法中也不能通过self直接调用当前类的其他的对象方法。 参考： OC-基础总结（一）</description>
    </item>
    <item>
      <title>OC基础学习：对象在内存中是如何存储的？</title>
      <link>https://andyron.top/blog/2017/10/oc-memory.html/</link>
      <pubDate>Thu, 26 Oct 2017 11:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/oc-memory.html/</guid>
      <description>例：Person *p1 = [Person new]; Person *p1; 会在栈内存中申请一块空间，在栈内存中声明1个Person类型的指针变量p1。p1是一个指针变量，那么只能存储地址</description>
    </item>
    <item>
      <title>OC基础学习：#import,#include,@class</title>
      <link>https://andyron.top/blog/2017/10/oc-basic-import-include-class.html/</link>
      <pubDate>Wed, 25 Oct 2017 21:13:34 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/oc-basic-import-include-class.html/</guid>
      <description>#import是#inlcude的增强版，能防止同一个文件被多次包含。 #import会包含这个类的所有信息，而@class只是告诉编译器，其</description>
    </item>
    <item>
      <title>向CocoaPods发布代码</title>
      <link>https://andyron.top/blog/2017/10/ios-cocoapods-push.html/</link>
      <pubDate>Sun, 08 Oct 2017 13:53:50 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/10/ios-cocoapods-push.html/</guid>
      <description>Cocoapods是非常好用的一个iOS依赖管理工具，用它来管理和更新项目中的第三库使iOS开发更加方便。 使用别人优秀的代码在程序员开发过程</description>
    </item>
    <item>
      <title>关于iOS开发中的pch文件</title>
      <link>https://andyron.top/blog/2017/09/ios-pch.html/</link>
      <pubDate>Tue, 26 Sep 2017 22:11:06 +0000</pubDate>
      <guid>https://andyron.top/blog/2017/09/ios-pch.html/</guid>
      <description>.pch文件也是一种头文件，它的内容能被项目中的其他所有源文件共享和访问。是一个预编译文件。 pch文件的作用： 1.存放一些全局的宏(整个项目</description>
    </item>
  </channel>
</rss>
